{"ast":null,"code":"import _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallback, useState } from 'react';\n/**\n * @title multipleSelect hooks\n * @description multipleSelect by hold down shift key\n */\n\nexport default function useMultipleSelect(getKey) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      prevSelectedIndex = _useState2[0],\n      setPrevSelectedIndex = _useState2[1];\n\n  var multipleSelect = useCallback(function (currentSelectedIndex, data, selectedKeys) {\n    var configPrevSelectedIndex = prevSelectedIndex !== null && prevSelectedIndex !== void 0 ? prevSelectedIndex : currentSelectedIndex; // add/delete the selected range\n\n    var startIndex = Math.min(configPrevSelectedIndex || 0, currentSelectedIndex);\n    var endIndex = Math.max(configPrevSelectedIndex || 0, currentSelectedIndex);\n    var rangeKeys = data.slice(startIndex, endIndex + 1).map(function (item) {\n      return getKey(item);\n    });\n    var shouldSelected = rangeKeys.some(function (rangeKey) {\n      return !selectedKeys.has(rangeKey);\n    });\n    var changedKeys = [];\n    rangeKeys.forEach(function (item) {\n      if (shouldSelected) {\n        if (!selectedKeys.has(item)) {\n          changedKeys.push(item);\n        }\n\n        selectedKeys.add(item);\n      } else {\n        selectedKeys.delete(item);\n        changedKeys.push(item);\n      }\n    });\n    setPrevSelectedIndex(shouldSelected ? endIndex : null);\n    return changedKeys;\n  }, [prevSelectedIndex]);\n\n  var updatePrevSelectedIndex = function updatePrevSelectedIndex(val) {\n    setPrevSelectedIndex(val);\n  };\n\n  return [multipleSelect, updatePrevSelectedIndex];\n}","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/_util/hooks/useMultipleSelect.js"],"names":["useCallback","useState","useMultipleSelect","getKey","prevSelectedIndex","setPrevSelectedIndex","multipleSelect","currentSelectedIndex","data","selectedKeys","configPrevSelectedIndex","startIndex","Math","min","endIndex","max","rangeKeys","slice","map","item","shouldSelected","some","rangeKey","has","changedKeys","forEach","push","add","delete","updatePrevSelectedIndex","val"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AAChD,kBAAkDF,QAAQ,CAAC,IAAD,CAA1D;AAAA;AAAA,MAAOG,iBAAP;AAAA,MAA0BC,oBAA1B;;AACA,MAAMC,cAAc,GAAGN,WAAW,CAAC,UAACO,oBAAD,EAAuBC,IAAvB,EAA6BC,YAA7B,EAA8C;AAC/E,QAAMC,uBAAuB,GAAGN,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6DA,iBAA7D,GAAiFG,oBAAjH,CAD+E,CAE/E;;AACA,QAAMI,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASH,uBAAuB,IAAI,CAApC,EAAuCH,oBAAvC,CAAnB;AACA,QAAMO,QAAQ,GAAGF,IAAI,CAACG,GAAL,CAASL,uBAAuB,IAAI,CAApC,EAAuCH,oBAAvC,CAAjB;AACA,QAAMS,SAAS,GAAGR,IAAI,CAACS,KAAL,CAAWN,UAAX,EAAuBG,QAAQ,GAAG,CAAlC,EAAqCI,GAArC,CAAyC,UAAAC,IAAI;AAAA,aAAIhB,MAAM,CAACgB,IAAD,CAAV;AAAA,KAA7C,CAAlB;AACA,QAAMC,cAAc,GAAGJ,SAAS,CAACK,IAAV,CAAe,UAAAC,QAAQ;AAAA,aAAI,CAACb,YAAY,CAACc,GAAb,CAAiBD,QAAjB,CAAL;AAAA,KAAvB,CAAvB;AACA,QAAME,WAAW,GAAG,EAApB;AACAR,IAAAA,SAAS,CAACS,OAAV,CAAkB,UAAAN,IAAI,EAAI;AACxB,UAAIC,cAAJ,EAAoB;AAClB,YAAI,CAACX,YAAY,CAACc,GAAb,CAAiBJ,IAAjB,CAAL,EAA6B;AAC3BK,UAAAA,WAAW,CAACE,IAAZ,CAAiBP,IAAjB;AACD;;AACDV,QAAAA,YAAY,CAACkB,GAAb,CAAiBR,IAAjB;AACD,OALD,MAKO;AACLV,QAAAA,YAAY,CAACmB,MAAb,CAAoBT,IAApB;AACAK,QAAAA,WAAW,CAACE,IAAZ,CAAiBP,IAAjB;AACD;AACF,KAVD;AAWAd,IAAAA,oBAAoB,CAACe,cAAc,GAAGN,QAAH,GAAc,IAA7B,CAApB;AACA,WAAOU,WAAP;AACD,GArBiC,EAqB/B,CAACpB,iBAAD,CArB+B,CAAlC;;AAsBA,MAAMyB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,GAAG,EAAI;AACrCzB,IAAAA,oBAAoB,CAACyB,GAAD,CAApB;AACD,GAFD;;AAGA,SAAO,CAACxB,cAAD,EAAiBuB,uBAAjB,CAAP;AACD","sourcesContent":["import { useCallback, useState } from 'react';\n/**\n * @title multipleSelect hooks\n * @description multipleSelect by hold down shift key\n */\nexport default function useMultipleSelect(getKey) {\n  const [prevSelectedIndex, setPrevSelectedIndex] = useState(null);\n  const multipleSelect = useCallback((currentSelectedIndex, data, selectedKeys) => {\n    const configPrevSelectedIndex = prevSelectedIndex !== null && prevSelectedIndex !== void 0 ? prevSelectedIndex : currentSelectedIndex;\n    // add/delete the selected range\n    const startIndex = Math.min(configPrevSelectedIndex || 0, currentSelectedIndex);\n    const endIndex = Math.max(configPrevSelectedIndex || 0, currentSelectedIndex);\n    const rangeKeys = data.slice(startIndex, endIndex + 1).map(item => getKey(item));\n    const shouldSelected = rangeKeys.some(rangeKey => !selectedKeys.has(rangeKey));\n    const changedKeys = [];\n    rangeKeys.forEach(item => {\n      if (shouldSelected) {\n        if (!selectedKeys.has(item)) {\n          changedKeys.push(item);\n        }\n        selectedKeys.add(item);\n      } else {\n        selectedKeys.delete(item);\n        changedKeys.push(item);\n      }\n    });\n    setPrevSelectedIndex(shouldSelected ? endIndex : null);\n    return changedKeys;\n  }, [prevSelectedIndex]);\n  const updatePrevSelectedIndex = val => {\n    setPrevSelectedIndex(val);\n  };\n  return [multipleSelect, updatePrevSelectedIndex];\n}"]},"metadata":{},"sourceType":"module"}