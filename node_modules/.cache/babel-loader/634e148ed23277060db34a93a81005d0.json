{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { AggregationColor } from '../../color';\nimport { getGradientPercentColor } from '../../util';\nimport { GradientColorSlider } from '../ColorSlider';\n\nfunction sortColors(colors) {\n  return _toConsumableArray(colors).sort(function (a, b) {\n    return a.percent - b.percent;\n  });\n}\n/**\n * GradientColorBar will auto show when the mode is `gradient`.\n */\n\n\nvar GradientColorBar = function GradientColorBar(props) {\n  var prefixCls = props.prefixCls,\n      mode = props.mode,\n      onChange = props.onChange,\n      onChangeComplete = props.onChangeComplete,\n      onActive = props.onActive,\n      activeIndex = props.activeIndex,\n      onGradientDragging = props.onGradientDragging,\n      colors = props.colors;\n  var isGradient = mode === 'gradient'; // ============================= Colors =============================\n\n  var colorList = React.useMemo(function () {\n    return colors.map(function (info) {\n      return {\n        percent: info.percent,\n        color: info.color.toRgbString()\n      };\n    });\n  }, [colors]);\n  var values = React.useMemo(function () {\n    return colorList.map(function (info) {\n      return info.percent;\n    });\n  }, [colorList]); // ============================== Drag ==============================\n\n  var colorsRef = React.useRef(colorList); // Record current colors\n\n  var onDragStart = function onDragStart(_ref) {\n    var rawValues = _ref.rawValues,\n        draggingIndex = _ref.draggingIndex,\n        draggingValue = _ref.draggingValue;\n\n    if (rawValues.length > colorList.length) {\n      // Add new node\n      var newPointColor = getGradientPercentColor(colorList, draggingValue);\n\n      var nextColors = _toConsumableArray(colorList);\n\n      nextColors.splice(draggingIndex, 0, {\n        percent: draggingValue,\n        color: newPointColor\n      });\n      colorsRef.current = nextColors;\n    } else {\n      colorsRef.current = colorList;\n    }\n\n    onGradientDragging(true);\n    onChange(new AggregationColor(sortColors(colorsRef.current)), true);\n  }; // Adjust color when dragging\n\n\n  var onDragChange = function onDragChange(_ref2) {\n    var deleteIndex = _ref2.deleteIndex,\n        draggingIndex = _ref2.draggingIndex,\n        draggingValue = _ref2.draggingValue;\n\n    var nextColors = _toConsumableArray(colorsRef.current);\n\n    if (deleteIndex !== -1) {\n      nextColors.splice(deleteIndex, 1);\n    } else {\n      nextColors[draggingIndex] = Object.assign(Object.assign({}, nextColors[draggingIndex]), {\n        percent: draggingValue\n      });\n      nextColors = sortColors(nextColors);\n    }\n\n    onChange(new AggregationColor(nextColors), true);\n  }; // ============================== Key ===============================\n\n\n  var onKeyDelete = function onKeyDelete(index) {\n    var nextColors = _toConsumableArray(colorList);\n\n    nextColors.splice(index, 1);\n    var nextColor = new AggregationColor(nextColors);\n    onChange(nextColor);\n    onChangeComplete(nextColor);\n  }; // ============================= Change =============================\n\n\n  var onInternalChangeComplete = function onInternalChangeComplete(nextValues) {\n    onChangeComplete(new AggregationColor(colorList)); // Reset `activeIndex` if out of range\n\n    if (activeIndex >= nextValues.length) {\n      onActive(nextValues.length - 1);\n    }\n\n    onGradientDragging(false);\n  }; // ============================= Render =============================\n\n\n  if (!isGradient) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(GradientColorSlider, {\n    min: 0,\n    max: 100,\n    prefixCls: prefixCls,\n    className: \"\".concat(prefixCls, \"-gradient-slider\"),\n    colors: colorList,\n    color: null,\n    value: values,\n    range: true,\n    onChangeComplete: onInternalChangeComplete,\n    disabled: false,\n    type: \"gradient\",\n    // Active\n    activeIndex: activeIndex,\n    onActive: onActive,\n    // Drag\n    onDragStart: onDragStart,\n    onDragChange: onDragChange,\n    onKeyDelete: onKeyDelete\n  });\n};\n\nexport default /*#__PURE__*/React.memo(GradientColorBar);","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/color-picker/components/PanelPicker/GradientColorBar.js"],"names":["_toConsumableArray","React","AggregationColor","getGradientPercentColor","GradientColorSlider","sortColors","colors","sort","a","b","percent","GradientColorBar","props","prefixCls","mode","onChange","onChangeComplete","onActive","activeIndex","onGradientDragging","isGradient","colorList","useMemo","map","info","color","toRgbString","values","colorsRef","useRef","onDragStart","rawValues","draggingIndex","draggingValue","length","newPointColor","nextColors","splice","current","onDragChange","deleteIndex","Object","assign","onKeyDelete","index","nextColor","onInternalChangeComplete","nextValues","createElement","min","max","className","value","range","disabled","type","memo"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { AggregationColor } from '../../color';\nimport { getGradientPercentColor } from '../../util';\nimport { GradientColorSlider } from '../ColorSlider';\nfunction sortColors(colors) {\n  return _toConsumableArray(colors).sort((a, b) => a.percent - b.percent);\n}\n/**\n * GradientColorBar will auto show when the mode is `gradient`.\n */\nconst GradientColorBar = props => {\n  const {\n    prefixCls,\n    mode,\n    onChange,\n    onChangeComplete,\n    onActive,\n    activeIndex,\n    onGradientDragging,\n    colors\n  } = props;\n  const isGradient = mode === 'gradient';\n  // ============================= Colors =============================\n  const colorList = React.useMemo(() => colors.map(info => ({\n    percent: info.percent,\n    color: info.color.toRgbString()\n  })), [colors]);\n  const values = React.useMemo(() => colorList.map(info => info.percent), [colorList]);\n  // ============================== Drag ==============================\n  const colorsRef = React.useRef(colorList);\n  // Record current colors\n  const onDragStart = ({\n    rawValues,\n    draggingIndex,\n    draggingValue\n  }) => {\n    if (rawValues.length > colorList.length) {\n      // Add new node\n      const newPointColor = getGradientPercentColor(colorList, draggingValue);\n      const nextColors = _toConsumableArray(colorList);\n      nextColors.splice(draggingIndex, 0, {\n        percent: draggingValue,\n        color: newPointColor\n      });\n      colorsRef.current = nextColors;\n    } else {\n      colorsRef.current = colorList;\n    }\n    onGradientDragging(true);\n    onChange(new AggregationColor(sortColors(colorsRef.current)), true);\n  };\n  // Adjust color when dragging\n  const onDragChange = ({\n    deleteIndex,\n    draggingIndex,\n    draggingValue\n  }) => {\n    let nextColors = _toConsumableArray(colorsRef.current);\n    if (deleteIndex !== -1) {\n      nextColors.splice(deleteIndex, 1);\n    } else {\n      nextColors[draggingIndex] = Object.assign(Object.assign({}, nextColors[draggingIndex]), {\n        percent: draggingValue\n      });\n      nextColors = sortColors(nextColors);\n    }\n    onChange(new AggregationColor(nextColors), true);\n  };\n  // ============================== Key ===============================\n  const onKeyDelete = index => {\n    const nextColors = _toConsumableArray(colorList);\n    nextColors.splice(index, 1);\n    const nextColor = new AggregationColor(nextColors);\n    onChange(nextColor);\n    onChangeComplete(nextColor);\n  };\n  // ============================= Change =============================\n  const onInternalChangeComplete = nextValues => {\n    onChangeComplete(new AggregationColor(colorList));\n    // Reset `activeIndex` if out of range\n    if (activeIndex >= nextValues.length) {\n      onActive(nextValues.length - 1);\n    }\n    onGradientDragging(false);\n  };\n  // ============================= Render =============================\n  if (!isGradient) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(GradientColorSlider, {\n    min: 0,\n    max: 100,\n    prefixCls: prefixCls,\n    className: `${prefixCls}-gradient-slider`,\n    colors: colorList,\n    color: null,\n    value: values,\n    range: true,\n    onChangeComplete: onInternalChangeComplete,\n    disabled: false,\n    type: \"gradient\",\n    // Active\n    activeIndex: activeIndex,\n    onActive: onActive,\n    // Drag\n    onDragStart: onDragStart,\n    onDragChange: onDragChange,\n    onKeyDelete: onKeyDelete\n  });\n};\nexport default /*#__PURE__*/React.memo(GradientColorBar);"]},"metadata":{},"sourceType":"module"}