{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { useContext } from 'react';\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport { unstableSetRender } from '../config-provider/UnstableContext';\nimport PurePanel from './PurePanel';\nimport useMessage, { useInternalMessage } from './useMessage';\nimport { wrapPromiseFn } from './util';\nvar message = null;\n\nvar act = function act(callback) {\n  return callback();\n};\n\nvar taskQueue = [];\nvar defaultGlobalConfig = {};\n\nfunction getGlobalContext() {\n  var _defaultGlobalConfig = defaultGlobalConfig,\n      getContainer = _defaultGlobalConfig.getContainer,\n      duration = _defaultGlobalConfig.duration,\n      rtl = _defaultGlobalConfig.rtl,\n      maxCount = _defaultGlobalConfig.maxCount,\n      top = _defaultGlobalConfig.top;\n  var mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: function getContainer() {\n      return mergedContainer;\n    },\n    duration: duration,\n    rtl: rtl,\n    maxCount: maxCount,\n    top: top\n  };\n}\n\nvar GlobalHolder = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var messageConfig = props.messageConfig,\n      sync = props.sync;\n\n  var _useContext = useContext(ConfigContext),\n      getPrefixCls = _useContext.getPrefixCls;\n\n  var prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('message');\n  var appConfig = useContext(AppConfigContext);\n\n  var _useInternalMessage = useInternalMessage(Object.assign(Object.assign(Object.assign({}, messageConfig), {\n    prefixCls: prefixCls\n  }), appConfig.message)),\n      _useInternalMessage2 = _slicedToArray(_useInternalMessage, 2),\n      api = _useInternalMessage2[0],\n      holder = _useInternalMessage2[1];\n\n  React.useImperativeHandle(ref, function () {\n    var instance = Object.assign({}, api);\n    Object.keys(instance).forEach(function (method) {\n      instance[method] = function () {\n        sync();\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return api[method].apply(api, args);\n      };\n    });\n    return {\n      instance: instance,\n      sync: sync\n    };\n  });\n  return holder;\n});\nvar GlobalHolderWrapper = /*#__PURE__*/React.forwardRef(function (_, ref) {\n  var _React$useState = React.useState(getGlobalContext),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      messageConfig = _React$useState2[0],\n      setMessageConfig = _React$useState2[1];\n\n  var sync = function sync() {\n    setMessageConfig(getGlobalContext);\n  };\n\n  React.useEffect(sync, []);\n  var global = globalConfig();\n  var rootPrefixCls = global.getRootPrefixCls();\n  var rootIconPrefixCls = global.getIconPrefixCls();\n  var theme = global.getTheme();\n  var dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    messageConfig: messageConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n});\n\nfunction flushNotice() {\n  if (!message) {\n    var holderFragment = document.createDocumentFragment();\n    var newMessage = {\n      fragment: holderFragment\n    };\n    message = newMessage; // Delay render to avoid sync issue\n\n    act(function () {\n      var reactRender = unstableSetRender();\n      reactRender( /*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: function ref(node) {\n          var _ref = node || {},\n              instance = _ref.instance,\n              sync = _ref.sync; // React 18 test env will throw if call immediately in ref\n\n\n          Promise.resolve().then(function () {\n            if (!newMessage.instance && instance) {\n              newMessage.instance = instance;\n              newMessage.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  } // Notification not ready\n\n\n  if (!message.instance) {\n    return;\n  } // >>> Execute task\n\n\n  taskQueue.forEach(function (task) {\n    var type = task.type,\n        skipped = task.skipped; // Only `skipped` when user call notice but cancel it immediately\n    // and instance not ready\n\n    if (!skipped) {\n      switch (type) {\n        case 'open':\n          {\n            act(function () {\n              var closeFn = message.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n            break;\n          }\n\n        case 'destroy':\n          act(function () {\n            message === null || message === void 0 ? void 0 : message.instance.destroy(task.key);\n          });\n          break;\n        // Other type open\n\n        default:\n          {\n            act(function () {\n              var _message$instance;\n\n              var closeFn = (_message$instance = message.instance)[type].apply(_message$instance, _toConsumableArray(task.args));\n\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n          }\n      }\n    }\n  }); // Clean up\n\n  taskQueue = [];\n} // ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\n\n\nfunction setMessageGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config); // Trigger sync for it\n\n  act(function () {\n    var _a;\n\n    (_a = message === null || message === void 0 ? void 0 : message.sync) === null || _a === void 0 ? void 0 : _a.call(message);\n  });\n}\n\nfunction open(config) {\n  var result = wrapPromiseFn(function (resolve) {\n    var closeFn;\n    var task = {\n      type: 'open',\n      config: config,\n      resolve: resolve,\n      setCloseFn: function setCloseFn(fn) {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return function () {\n      if (closeFn) {\n        act(function () {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\n\nfunction typeOpen(type, args) {\n  var global = globalConfig();\n\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('message');\n  }\n\n  var result = wrapPromiseFn(function (resolve) {\n    var closeFn;\n    var task = {\n      type: type,\n      args: args,\n      resolve: resolve,\n      setCloseFn: function setCloseFn(fn) {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return function () {\n      if (closeFn) {\n        act(function () {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\n\nvar destroy = function destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key: key\n  });\n  flushNotice();\n};\n\nvar methods = ['success', 'info', 'warning', 'error', 'loading'];\nvar baseStaticMethods = {\n  open: open,\n  destroy: destroy,\n  config: setMessageGlobalConfig,\n  useMessage: useMessage,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nvar staticMethods = baseStaticMethods;\nmethods.forEach(function (type) {\n  staticMethods[type] = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return typeOpen(type, args);\n  };\n}); // ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\n\nvar noop = function noop() {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport var actWrapper = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = function actWrapper(wrapper) {\n    act = wrapper;\n  };\n}\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport var actDestroy = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = function actDestroy() {\n    message = null;\n  };\n}\n\nexport default staticMethods;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/message/index.js"],"names":["_toConsumableArray","React","useContext","AppConfigContext","ConfigProvider","ConfigContext","globalConfig","warnContext","unstableSetRender","PurePanel","useMessage","useInternalMessage","wrapPromiseFn","message","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","getContainer","duration","rtl","maxCount","top","mergedContainer","document","body","GlobalHolder","forwardRef","props","ref","messageConfig","sync","getPrefixCls","prefixCls","appConfig","Object","assign","api","holder","useImperativeHandle","instance","keys","forEach","method","args","apply","GlobalHolderWrapper","_","useState","setMessageConfig","useEffect","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","dom","createElement","iconPrefixCls","holderRender","flushNotice","holderFragment","createDocumentFragment","newMessage","fragment","reactRender","node","Promise","resolve","then","task","type","skipped","closeFn","open","config","setCloseFn","destroy","key","_message$instance","setMessageGlobalConfig","_a","call","result","fn","push","typeOpen","process","env","NODE_ENV","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","actWrapper","wrapper","actDestroy"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { useContext } from 'react';\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport { unstableSetRender } from '../config-provider/UnstableContext';\nimport PurePanel from './PurePanel';\nimport useMessage, { useInternalMessage } from './useMessage';\nimport { wrapPromiseFn } from './util';\nlet message = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    getContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  } = defaultGlobalConfig;\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: () => mergedContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    messageConfig,\n    sync\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('message');\n  const appConfig = useContext(AppConfigContext);\n  const [api, holder] = useInternalMessage(Object.assign(Object.assign(Object.assign({}, messageConfig), {\n    prefixCls\n  }), appConfig.message));\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = (...args) => {\n        sync();\n        return api[method].apply(api, args);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return holder;\n});\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [messageConfig, setMessageConfig] = React.useState(getGlobalContext);\n  const sync = () => {\n    setMessageConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    messageConfig: messageConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n});\nfunction flushNotice() {\n  if (!message) {\n    const holderFragment = document.createDocumentFragment();\n    const newMessage = {\n      fragment: holderFragment\n    };\n    message = newMessage;\n    // Delay render to avoid sync issue\n    act(() => {\n      const reactRender = unstableSetRender();\n      reactRender(/*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          // React 18 test env will throw if call immediately in ref\n          Promise.resolve().then(() => {\n            if (!newMessage.instance && instance) {\n              newMessage.instance = instance;\n              newMessage.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!message.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    const {\n      type,\n      skipped\n    } = task;\n    // Only `skipped` when user call notice but cancel it immediately\n    // and instance not ready\n    if (!skipped) {\n      switch (type) {\n        case 'open':\n          {\n            act(() => {\n              const closeFn = message.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n            break;\n          }\n        case 'destroy':\n          act(() => {\n            message === null || message === void 0 ? void 0 : message.instance.destroy(task.key);\n          });\n          break;\n        // Other type open\n        default:\n          {\n            act(() => {\n              var _message$instance;\n              const closeFn = (_message$instance = message.instance)[type].apply(_message$instance, _toConsumableArray(task.args));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n          }\n      }\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setMessageGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = message === null || message === void 0 ? void 0 : message.sync) === null || _a === void 0 ? void 0 : _a.call(message);\n  });\n}\nfunction open(config) {\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type: 'open',\n      config,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\nfunction typeOpen(type, args) {\n  const global = globalConfig();\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('message');\n  }\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type,\n      args,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\nconst destroy = key => {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n};\nconst methods = ['success', 'info', 'warning', 'error', 'loading'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setMessageGlobalConfig,\n  useMessage,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = (...args) => typeOpen(type, args);\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actDestroy = noop;\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = () => {\n    message = null;\n  };\n}\nexport default staticMethods;"]},"metadata":{},"sourceType":"module"}