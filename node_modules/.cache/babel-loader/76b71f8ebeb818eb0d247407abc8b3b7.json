{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { fillFieldNames } from \"rc-tree/es/utils/treeUtil\";\nvar RECORD_NONE = 0;\nvar RECORD_START = 1;\nvar RECORD_END = 2;\n\nfunction traverseNodesKey(treeData, callback, fieldNames) {\n  var fieldKey = fieldNames.key,\n      fieldChildren = fieldNames.children;\n\n  function processNode(dataNode) {\n    var key = dataNode[fieldKey];\n    var children = dataNode[fieldChildren];\n\n    if (callback(key, dataNode) !== false) {\n      traverseNodesKey(children || [], callback, fieldNames);\n    }\n  }\n\n  treeData.forEach(processNode);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\n\nexport function calcRangeKeys(_ref) {\n  var treeData = _ref.treeData,\n      expandedKeys = _ref.expandedKeys,\n      startKey = _ref.startKey,\n      endKey = _ref.endKey,\n      fieldNames = _ref.fieldNames;\n  var keys = [];\n  var record = RECORD_NONE;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(treeData, function (key) {\n    if (record === RECORD_END) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === RECORD_NONE) {\n        record = RECORD_START;\n      } else if (record === RECORD_START) {\n        record = RECORD_END;\n        return false;\n      }\n    } else if (record === RECORD_START) {\n      // Append selection\n      keys.push(key);\n    }\n\n    return expandedKeys.includes(key);\n  }, fillFieldNames(fieldNames));\n  return keys;\n}\nexport function convertDirectoryKeysToNodes(treeData, keys, fieldNames) {\n  var restKeys = _toConsumableArray(keys);\n\n  var nodes = [];\n  traverseNodesKey(treeData, function (key, node) {\n    var index = restKeys.indexOf(key);\n\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n\n    return !!restKeys.length;\n  }, fillFieldNames(fieldNames));\n  return nodes;\n}","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/tree/utils/dictUtil.js"],"names":["_toConsumableArray","fillFieldNames","RECORD_NONE","RECORD_START","RECORD_END","traverseNodesKey","treeData","callback","fieldNames","fieldKey","key","fieldChildren","children","processNode","dataNode","forEach","calcRangeKeys","expandedKeys","startKey","endKey","keys","record","matchKey","push","includes","convertDirectoryKeysToNodes","restKeys","nodes","node","index","indexOf","splice","length"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { fillFieldNames } from \"rc-tree/es/utils/treeUtil\";\nconst RECORD_NONE = 0;\nconst RECORD_START = 1;\nconst RECORD_END = 2;\nfunction traverseNodesKey(treeData, callback, fieldNames) {\n  const {\n    key: fieldKey,\n    children: fieldChildren\n  } = fieldNames;\n  function processNode(dataNode) {\n    const key = dataNode[fieldKey];\n    const children = dataNode[fieldChildren];\n    if (callback(key, dataNode) !== false) {\n      traverseNodesKey(children || [], callback, fieldNames);\n    }\n  }\n  treeData.forEach(processNode);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\nexport function calcRangeKeys({\n  treeData,\n  expandedKeys,\n  startKey,\n  endKey,\n  fieldNames\n}) {\n  const keys = [];\n  let record = RECORD_NONE;\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n  if (!startKey || !endKey) {\n    return [];\n  }\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n  traverseNodesKey(treeData, key => {\n    if (record === RECORD_END) {\n      return false;\n    }\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n      if (record === RECORD_NONE) {\n        record = RECORD_START;\n      } else if (record === RECORD_START) {\n        record = RECORD_END;\n        return false;\n      }\n    } else if (record === RECORD_START) {\n      // Append selection\n      keys.push(key);\n    }\n    return expandedKeys.includes(key);\n  }, fillFieldNames(fieldNames));\n  return keys;\n}\nexport function convertDirectoryKeysToNodes(treeData, keys, fieldNames) {\n  const restKeys = _toConsumableArray(keys);\n  const nodes = [];\n  traverseNodesKey(treeData, (key, node) => {\n    const index = restKeys.indexOf(key);\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n    return !!restKeys.length;\n  }, fillFieldNames(fieldNames));\n  return nodes;\n}"]},"metadata":{},"sourceType":"module"}