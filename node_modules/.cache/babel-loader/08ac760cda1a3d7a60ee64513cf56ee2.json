{"ast":null,"code":"import _defineProperty from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { unit } from '@ant-design/cssinjs';\nimport { FastColor } from '@ant-design/fast-color';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n\nvar genQRCodeStyle = function genQRCodeStyle(token) {\n  var _Object$assign, _ref;\n\n  var componentCls = token.componentCls,\n      lineWidth = token.lineWidth,\n      lineType = token.lineType,\n      colorSplit = token.colorSplit;\n  return _ref = {}, _defineProperty(_ref, componentCls, Object.assign(Object.assign({}, resetComponent(token)), (_Object$assign = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: token.paddingSM,\n    backgroundColor: token.colorWhite,\n    borderRadius: token.borderRadiusLG,\n    border: \"\".concat(unit(lineWidth), \" \").concat(lineType, \" \").concat(colorSplit),\n    position: 'relative',\n    overflow: 'hidden'\n  }, _defineProperty(_Object$assign, \"& > \".concat(componentCls, \"-mask\"), _defineProperty({\n    position: 'absolute',\n    insetBlockStart: 0,\n    insetInlineStart: 0,\n    zIndex: 10,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: '100%',\n    color: token.colorText,\n    lineHeight: token.lineHeight,\n    background: token.QRCodeMaskBackgroundColor,\n    textAlign: 'center'\n  }, \"& > \".concat(componentCls, \"-expired, & > \").concat(componentCls, \"-scanned\"), {\n    color: token.QRCodeTextColor\n  })), _defineProperty(_Object$assign, '> canvas', {\n    alignSelf: 'stretch',\n    flex: 'auto',\n    minWidth: 0\n  }), _defineProperty(_Object$assign, '&-icon', {\n    marginBlockEnd: token.marginXS,\n    fontSize: token.controlHeight\n  }), _Object$assign))), _defineProperty(_ref, \"\".concat(componentCls, \"-borderless\"), {\n    borderColor: 'transparent',\n    padding: 0,\n    borderRadius: 0\n  }), _ref;\n};\n\nexport var prepareComponentToken = function prepareComponentToken(token) {\n  return {\n    QRCodeMaskBackgroundColor: new FastColor(token.colorBgContainer).setA(0.96).toRgbString()\n  };\n};\nexport default genStyleHooks('QRCode', function (token) {\n  var mergedToken = mergeToken(token, {\n    QRCodeTextColor: token.colorText\n  });\n  return genQRCodeStyle(mergedToken);\n}, prepareComponentToken);","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/qr-code/style/index.js"],"names":["unit","FastColor","resetComponent","genStyleHooks","mergeToken","genQRCodeStyle","token","componentCls","lineWidth","lineType","colorSplit","Object","assign","display","justifyContent","alignItems","padding","paddingSM","backgroundColor","colorWhite","borderRadius","borderRadiusLG","border","position","overflow","insetBlockStart","insetInlineStart","zIndex","flexDirection","width","height","color","colorText","lineHeight","background","QRCodeMaskBackgroundColor","textAlign","QRCodeTextColor","alignSelf","flex","minWidth","marginBlockEnd","marginXS","fontSize","controlHeight","borderColor","prepareComponentToken","colorBgContainer","setA","toRgbString","mergedToken"],"mappings":"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","sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { FastColor } from '@ant-design/fast-color';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst genQRCodeStyle = token => {\n  const {\n    componentCls,\n    lineWidth,\n    lineType,\n    colorSplit\n  } = token;\n  return {\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: token.paddingSM,\n      backgroundColor: token.colorWhite,\n      borderRadius: token.borderRadiusLG,\n      border: `${unit(lineWidth)} ${lineType} ${colorSplit}`,\n      position: 'relative',\n      overflow: 'hidden',\n      [`& > ${componentCls}-mask`]: {\n        position: 'absolute',\n        insetBlockStart: 0,\n        insetInlineStart: 0,\n        zIndex: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%',\n        height: '100%',\n        color: token.colorText,\n        lineHeight: token.lineHeight,\n        background: token.QRCodeMaskBackgroundColor,\n        textAlign: 'center',\n        [`& > ${componentCls}-expired, & > ${componentCls}-scanned`]: {\n          color: token.QRCodeTextColor\n        }\n      },\n      '> canvas': {\n        alignSelf: 'stretch',\n        flex: 'auto',\n        minWidth: 0\n      },\n      '&-icon': {\n        marginBlockEnd: token.marginXS,\n        fontSize: token.controlHeight\n      }\n    }),\n    [`${componentCls}-borderless`]: {\n      borderColor: 'transparent',\n      padding: 0,\n      borderRadius: 0\n    }\n  };\n};\nexport const prepareComponentToken = token => ({\n  QRCodeMaskBackgroundColor: new FastColor(token.colorBgContainer).setA(0.96).toRgbString()\n});\nexport default genStyleHooks('QRCode', token => {\n  const mergedToken = mergeToken(token, {\n    QRCodeTextColor: token.colorText\n  });\n  return genQRCodeStyle(mergedToken);\n}, prepareComponentToken);"]},"metadata":{},"sourceType":"module"}