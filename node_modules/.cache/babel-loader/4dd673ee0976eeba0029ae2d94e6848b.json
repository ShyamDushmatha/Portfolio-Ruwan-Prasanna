{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport CheckCircleFilled from \"@ant-design/icons/es/icons/CheckCircleFilled\";\nimport CloseCircleFilled from \"@ant-design/icons/es/icons/CloseCircleFilled\";\nimport ExclamationCircleFilled from \"@ant-design/icons/es/icons/ExclamationCircleFilled\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport { FormContext, FormItemInputContext } from '../context';\nimport { getStatus } from '../util';\nvar iconMap = {\n  success: CheckCircleFilled,\n  warning: ExclamationCircleFilled,\n  error: CloseCircleFilled,\n  validating: LoadingOutlined\n};\nexport default function StatusProvider(_ref) {\n  var children = _ref.children,\n      errors = _ref.errors,\n      warnings = _ref.warnings,\n      hasFeedback = _ref.hasFeedback,\n      validateStatus = _ref.validateStatus,\n      prefixCls = _ref.prefixCls,\n      meta = _ref.meta,\n      noStyle = _ref.noStyle;\n  var itemPrefixCls = \"\".concat(prefixCls, \"-item\");\n\n  var _React$useContext = React.useContext(FormContext),\n      feedbackIcons = _React$useContext.feedbackIcons;\n\n  var mergedValidateStatus = getStatus(errors, warnings, meta, null, !!hasFeedback, validateStatus);\n\n  var _React$useContext2 = React.useContext(FormItemInputContext),\n      parentIsFormItemInput = _React$useContext2.isFormItemInput,\n      parentStatus = _React$useContext2.status,\n      parentHasFeedback = _React$useContext2.hasFeedback,\n      parentFeedbackIcon = _React$useContext2.feedbackIcon; // ====================== Context =======================\n\n\n  var formItemStatusContext = React.useMemo(function () {\n    var _a;\n\n    var feedbackIcon;\n\n    if (hasFeedback) {\n      var customIcons = hasFeedback !== true && hasFeedback.icons || feedbackIcons;\n      var customIconNode = mergedValidateStatus && ((_a = customIcons === null || customIcons === void 0 ? void 0 : customIcons({\n        status: mergedValidateStatus,\n        errors: errors,\n        warnings: warnings\n      })) === null || _a === void 0 ? void 0 : _a[mergedValidateStatus]);\n      var IconNode = mergedValidateStatus && iconMap[mergedValidateStatus];\n      feedbackIcon = customIconNode !== false && IconNode ? /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames(\"\".concat(itemPrefixCls, \"-feedback-icon\"), \"\".concat(itemPrefixCls, \"-feedback-icon-\").concat(mergedValidateStatus))\n      }, customIconNode || /*#__PURE__*/React.createElement(IconNode, null)) : null;\n    }\n\n    var context = {\n      status: mergedValidateStatus || '',\n      errors: errors,\n      warnings: warnings,\n      hasFeedback: !!hasFeedback,\n      feedbackIcon: feedbackIcon,\n      isFormItemInput: true\n    }; // No style will follow parent context\n\n    if (noStyle) {\n      context.status = (mergedValidateStatus !== null && mergedValidateStatus !== void 0 ? mergedValidateStatus : parentStatus) || '';\n      context.isFormItemInput = parentIsFormItemInput;\n      context.hasFeedback = !!(hasFeedback !== null && hasFeedback !== void 0 ? hasFeedback : parentHasFeedback);\n      context.feedbackIcon = hasFeedback !== undefined ? context.feedbackIcon : parentFeedbackIcon;\n    }\n\n    return context;\n  }, [mergedValidateStatus, hasFeedback, noStyle, parentIsFormItemInput, parentStatus]); // ======================= Render =======================\n\n  return /*#__PURE__*/React.createElement(FormItemInputContext.Provider, {\n    value: formItemStatusContext\n  }, children);\n}","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/form/FormItem/StatusProvider.js"],"names":["React","CheckCircleFilled","CloseCircleFilled","ExclamationCircleFilled","LoadingOutlined","classNames","FormContext","FormItemInputContext","getStatus","iconMap","success","warning","error","validating","StatusProvider","children","errors","warnings","hasFeedback","validateStatus","prefixCls","meta","noStyle","itemPrefixCls","useContext","feedbackIcons","mergedValidateStatus","parentIsFormItemInput","isFormItemInput","parentStatus","status","parentHasFeedback","parentFeedbackIcon","feedbackIcon","formItemStatusContext","useMemo","_a","customIcons","icons","customIconNode","IconNode","createElement","className","context","undefined","Provider","value"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport CheckCircleFilled from \"@ant-design/icons/es/icons/CheckCircleFilled\";\nimport CloseCircleFilled from \"@ant-design/icons/es/icons/CloseCircleFilled\";\nimport ExclamationCircleFilled from \"@ant-design/icons/es/icons/ExclamationCircleFilled\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport { FormContext, FormItemInputContext } from '../context';\nimport { getStatus } from '../util';\nconst iconMap = {\n  success: CheckCircleFilled,\n  warning: ExclamationCircleFilled,\n  error: CloseCircleFilled,\n  validating: LoadingOutlined\n};\nexport default function StatusProvider({\n  children,\n  errors,\n  warnings,\n  hasFeedback,\n  validateStatus,\n  prefixCls,\n  meta,\n  noStyle\n}) {\n  const itemPrefixCls = `${prefixCls}-item`;\n  const {\n    feedbackIcons\n  } = React.useContext(FormContext);\n  const mergedValidateStatus = getStatus(errors, warnings, meta, null, !!hasFeedback, validateStatus);\n  const {\n    isFormItemInput: parentIsFormItemInput,\n    status: parentStatus,\n    hasFeedback: parentHasFeedback,\n    feedbackIcon: parentFeedbackIcon\n  } = React.useContext(FormItemInputContext);\n  // ====================== Context =======================\n  const formItemStatusContext = React.useMemo(() => {\n    var _a;\n    let feedbackIcon;\n    if (hasFeedback) {\n      const customIcons = hasFeedback !== true && hasFeedback.icons || feedbackIcons;\n      const customIconNode = mergedValidateStatus && ((_a = customIcons === null || customIcons === void 0 ? void 0 : customIcons({\n        status: mergedValidateStatus,\n        errors,\n        warnings\n      })) === null || _a === void 0 ? void 0 : _a[mergedValidateStatus]);\n      const IconNode = mergedValidateStatus && iconMap[mergedValidateStatus];\n      feedbackIcon = customIconNode !== false && IconNode ? (/*#__PURE__*/React.createElement(\"span\", {\n        className: classNames(`${itemPrefixCls}-feedback-icon`, `${itemPrefixCls}-feedback-icon-${mergedValidateStatus}`)\n      }, customIconNode || /*#__PURE__*/React.createElement(IconNode, null))) : null;\n    }\n    const context = {\n      status: mergedValidateStatus || '',\n      errors,\n      warnings,\n      hasFeedback: !!hasFeedback,\n      feedbackIcon,\n      isFormItemInput: true\n    };\n    // No style will follow parent context\n    if (noStyle) {\n      context.status = (mergedValidateStatus !== null && mergedValidateStatus !== void 0 ? mergedValidateStatus : parentStatus) || '';\n      context.isFormItemInput = parentIsFormItemInput;\n      context.hasFeedback = !!(hasFeedback !== null && hasFeedback !== void 0 ? hasFeedback : parentHasFeedback);\n      context.feedbackIcon = hasFeedback !== undefined ? context.feedbackIcon : parentFeedbackIcon;\n    }\n    return context;\n  }, [mergedValidateStatus, hasFeedback, noStyle, parentIsFormItemInput, parentStatus]);\n  // ======================= Render =======================\n  return /*#__PURE__*/React.createElement(FormItemInputContext.Provider, {\n    value: formItemStatusContext\n  }, children);\n}"]},"metadata":{},"sourceType":"module"}