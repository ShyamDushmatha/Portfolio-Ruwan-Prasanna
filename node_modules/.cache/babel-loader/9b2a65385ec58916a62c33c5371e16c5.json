{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport useMultipleSelect from '../../_util/hooks/useMultipleSelect';\nimport { devUseWarning } from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio'; // TODO: warning if use ajax!!!\n\nexport var SELECTION_COLUMN = {};\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\nvar EMPTY_LIST = [];\n\nvar flattenData = function flattenData(childrenColumnName, data) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\n\nvar useSelection = function useSelection(config, rowSelection) {\n  var _ref = rowSelection || {},\n      preserveSelectedRowKeys = _ref.preserveSelectedRowKeys,\n      selectedRowKeys = _ref.selectedRowKeys,\n      defaultSelectedRowKeys = _ref.defaultSelectedRowKeys,\n      getCheckboxProps = _ref.getCheckboxProps,\n      onSelectionChange = _ref.onChange,\n      onSelect = _ref.onSelect,\n      onSelectAll = _ref.onSelectAll,\n      onSelectInvert = _ref.onSelectInvert,\n      onSelectNone = _ref.onSelectNone,\n      onSelectMultiple = _ref.onSelectMultiple,\n      selectionColWidth = _ref.columnWidth,\n      selectionType = _ref.type,\n      selections = _ref.selections,\n      fixed = _ref.fixed,\n      customizeRenderCell = _ref.renderCell,\n      hideSelectAll = _ref.hideSelectAll,\n      _ref$checkStrictly = _ref.checkStrictly,\n      checkStrictly = _ref$checkStrictly === void 0 ? true : _ref$checkStrictly;\n\n  var prefixCls = config.prefixCls,\n      data = config.data,\n      pageData = config.pageData,\n      getRecordByKey = config.getRecordByKey,\n      getRowKey = config.getRowKey,\n      expandType = config.expandType,\n      childrenColumnName = config.childrenColumnName,\n      tableLocale = config.locale,\n      getPopupContainer = config.getPopupContainer;\n  var warning = devUseWarning('Table'); // ========================= MultipleSelect =========================\n\n  var _useMultipleSelect = useMultipleSelect(function (item) {\n    return item;\n  }),\n      _useMultipleSelect2 = _slicedToArray(_useMultipleSelect, 2),\n      multipleSelect = _useMultipleSelect2[0],\n      updatePrevSelectedIndex = _useMultipleSelect2[1]; // ========================= Keys =========================\n\n\n  var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSelectedKeys = _useMergedState2[0],\n      setMergedSelectedKeys = _useMergedState2[1]; // ======================== Caches ========================\n\n\n  var preserveRecordsRef = React.useRef(new Map());\n  var updatePreserveRecordsCache = useCallback(function (keys) {\n    if (preserveSelectedRowKeys) {\n      var newCache = new Map(); // Keep key if mark as preserveSelectedRowKeys\n\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n\n        newCache.set(key, record);\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]); // Update cache with selectedKeys\n\n  React.useEffect(function () {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]); // Get flatten data\n\n  var flattedData = useMemo(function () {\n    return flattenData(childrenColumnName, pageData);\n  }, [childrenColumnName, pageData]);\n\n  var _useMemo = useMemo(function () {\n    if (checkStrictly) {\n      return {\n        keyEntities: null\n      };\n    }\n\n    var convertData = data;\n\n    if (preserveSelectedRowKeys) {\n      // use flattedData keys\n      var keysSet = new Set(flattedData.map(function (record, index) {\n        return getRowKey(record, index);\n      })); // remove preserveRecords that duplicate data\n\n      // remove preserveRecords that duplicate data\n      var preserveRecords = Array.from(preserveRecordsRef.current).reduce(function (total, _ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            key = _ref3[0],\n            value = _ref3[1];\n\n        return keysSet.has(key) ? total : total.concat(value);\n      }, []);\n      convertData = [].concat(_toConsumableArray(convertData), _toConsumableArray(preserveRecords));\n    }\n\n    return convertDataToEntities(convertData, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys, flattedData]),\n      keyEntities = _useMemo.keyEntities; // Get all checkbox props\n\n\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'usage', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var rowKey = getRowKey(r);\n    var checkboxProps;\n\n    if (checkboxPropsMap.has(rowKey)) {\n      checkboxProps = checkboxPropsMap.get(getRowKey(r));\n    } else {\n      checkboxProps = getCheckboxProps ? getCheckboxProps(r) : undefined;\n    }\n\n    return !!(checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n\n  var _useMemo2 = useMemo(function () {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n\n    var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n      _useMemo3 = _slicedToArray(_useMemo2, 2),\n      derivedSelectedKeys = _useMemo3[0],\n      derivedHalfSelectedKeys = _useMemo3[1];\n\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]); // Reset if rowSelection reset\n\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys, method) {\n    var availableKeys;\n    var records;\n    updatePreserveRecordsCache(keys);\n\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        return preserveRecordsRef.current.get(key);\n      });\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n              var checkProps = checkboxPropsMap.get(key);\n\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            var keys = Array.from(keySet);\n\n            if (onSelectInvert) {\n              warning.deprecated(false, 'onSelectInvert', 'onChange');\n              onSelectInvert(keys);\n            }\n\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n\n      return selection;\n    }).map(function (selection) {\n      return Object.assign(Object.assign({}, selection), {\n        onSelect: function onSelect() {\n          var _a2;\n\n          var _a;\n\n          for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n            rest[_key] = arguments[_key];\n          }\n\n          (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n          updatePrevSelectedIndex(null);\n        }\n      });\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  var transformColumns = useCallback(function (columns) {\n    var _a; // >>>>>>>>>>> Skip if not exists `rowSelection`\n\n\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'usage', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(function (col) {\n        return col !== SELECTION_COLUMN;\n      });\n    } // >>>>>>>>>>> Support selection\n\n\n    var cloneColumns = _toConsumableArray(columns);\n\n    var keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys, 'all');\n      updatePrevSelectedIndex(null);\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    var title;\n    var columnTitleCheckbox;\n\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n\n      if (mergedSelections) {\n        var menu = {\n          getPopupContainer: getPopupContainer,\n          items: mergedSelections.map(function (selection, index) {\n            var key = selection.key,\n                text = selection.text,\n                onSelectionClick = selection.onSelect;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: function onClick() {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n\n      var allDisabledData = flattedData.map(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(function (_ref4) {\n        var disabled = _ref4.disabled;\n        return disabled;\n      });\n      var allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      var allDisabledAndChecked = allDisabled && allDisabledData.every(function (_ref5) {\n        var checked = _ref5.checked;\n        return checked;\n      });\n      var allDisabledSomeChecked = allDisabled && allDisabledData.some(function (_ref6) {\n        var checked = _ref6.checked;\n        return checked;\n      });\n      columnTitleCheckbox = /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, columnTitleCheckbox, customizeSelections);\n    } // Body Cell\n\n\n    var renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxProps, {\n            checked: checked,\n            onClick: function onClick(e) {\n              var _a;\n\n              e.stopPropagation();\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            },\n            onChange: function onChange(event) {\n              var _a;\n\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, event);\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'usage', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              var _a;\n\n              e.stopPropagation();\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            },\n            onChange: function onChange(event) {\n              var _a;\n\n              var nativeEvent = event.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var currentSelectedIndex = recordKeys.findIndex(function (item) {\n                return item === key;\n              });\n              var isMultiple = derivedSelectedKeys.some(function (item) {\n                return recordKeys.includes(item);\n              });\n\n              if (shiftKey && checkStrictly && isMultiple) {\n                var changedKeys = multipleSelect(currentSelectedIndex, recordKeys, keySet);\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                      halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n\n              if (checked) {\n                updatePrevSelectedIndex(null);\n              } else {\n                updatePrevSelectedIndex(currentSelectedIndex);\n              }\n\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, event);\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n          node = _renderCell.node,\n          checked = _renderCell.checked;\n\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n\n      return node;\n    }; // Insert selection column if not exist\n\n\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(function (col) {\n        var _a;\n\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        var _cloneColumns = cloneColumns,\n            _cloneColumns2 = _toArray(_cloneColumns),\n            expandColumn = _cloneColumns2[0],\n            restColumns = _cloneColumns2.slice(1);\n\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    } // Deduplicate selection column\n\n\n    var selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(function (col) {\n      return col === SELECTION_COLUMN;\n    }).length <= 1, 'usage', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter(function (column, index) {\n      return column !== SELECTION_COLUMN || index === selectionColumnIndex;\n    }); // Fixed column logic\n\n    var prevCol = cloneColumns[selectionColumnIndex - 1];\n    var nextCol = cloneColumns[selectionColumnIndex + 1];\n    var mergedFixed = fixed;\n\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n\n    var columnCls = classNames(\"\".concat(prefixCls, \"-selection-col\"), _defineProperty({}, \"\".concat(prefixCls, \"-selection-col-with-dropdown\"), selections && selectionType === 'checkbox'));\n\n    var renderColumnTitle = function renderColumnTitle() {\n      if (!(rowSelection === null || rowSelection === void 0 ? void 0 : rowSelection.columnTitle)) {\n        return title;\n      }\n\n      if (typeof rowSelection.columnTitle === 'function') {\n        return rowSelection.columnTitle(columnTitleCheckbox);\n      }\n\n      return rowSelection.columnTitle;\n    }; // Replace with real selection column\n\n\n    var selectionColumn = _defineProperty({\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: renderColumnTitle(),\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell,\n      align: rowSelection.align\n    }, INTERNAL_COL_DEFINE, {\n      className: columnCls\n    });\n\n    return cloneColumns.map(function (col) {\n      return col === SELECTION_COLUMN ? selectionColumn : col;\n    });\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\n\nexport default useSelection;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/table/hooks/useSelection.js"],"names":["_toConsumableArray","React","useCallback","useMemo","DownOutlined","classNames","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","useMergedState","useMultipleSelect","devUseWarning","Checkbox","Dropdown","Radio","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","concat","useSelection","config","rowSelection","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onSelectionChange","onChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","selectionColWidth","columnWidth","selectionType","type","selections","fixed","customizeRenderCell","renderCell","hideSelectAll","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","tableLocale","locale","getPopupContainer","warning","item","multipleSelect","updatePrevSelectedIndex","value","mergedSelectedKeys","setMergedSelectedKeys","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","keys","newCache","key","current","has","get","set","useEffect","flattedData","keyEntities","convertData","keysSet","Set","map","index","preserveRecords","Array","from","reduce","total","externalGetKey","childrenPropName","checkboxPropsMap","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","rowKey","undefined","disabled","checkedKeys","halfCheckedKeys","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","slice","derivedHalfSelectedKeySet","setSelectedKeys","method","availableKeys","records","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","deprecated","selectNone","Object","assign","_a2","_a","rest","call","apply","transformColumns","columns","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","columnTitleCheckbox","customizeSelections","menu","items","onSelectionClick","onClick","label","createElement","className","allDisabledData","checked","allDisabled","length","allDisabledAndChecked","allDisabledSomeChecked","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","shiftKey","currentSelectedIndex","findIndex","isMultiple","changedKeys","recordKey","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","columnType","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","columnCls","renderColumnTitle","columnTitle","selectionColumn","width","render","onCell","align"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport useMultipleSelect from '../../_util/hooks/useMultipleSelect';\nimport { devUseWarning } from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nconst flattenData = (childrenColumnName, data) => {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\nconst useSelection = (config, rowSelection) => {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  const warning = devUseWarning('Table');\n  // ========================= MultipleSelect =========================\n  const [multipleSelect, updatePrevSelectedIndex] = useMultipleSelect(item => item);\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  // Get flatten data\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);\n  const {\n    keyEntities\n  } = useMemo(() => {\n    if (checkStrictly) {\n      return {\n        keyEntities: null\n      };\n    }\n    let convertData = data;\n    if (preserveSelectedRowKeys) {\n      // use flattedData keys\n      const keysSet = new Set(flattedData.map((record, index) => getRowKey(record, index)));\n      // remove preserveRecords that duplicate data\n      const preserveRecords = Array.from(preserveRecordsRef.current).reduce((total, [key, value]) => keysSet.has(key) ? total : total.concat(value), []);\n      convertData = [].concat(_toConsumableArray(convertData), _toConsumableArray(preserveRecords));\n    }\n    return convertDataToEntities(convertData, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys, flattedData]);\n  // Get all checkbox props\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'usage', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    const rowKey = getRowKey(r);\n    let checkboxProps;\n    if (checkboxPropsMap.has(rowKey)) {\n      checkboxProps = checkboxPropsMap.get(getRowKey(r));\n    } else {\n      checkboxProps = getCheckboxProps ? getCheckboxProps(r) : undefined;\n    }\n    return !!(checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              warning.deprecated(false, 'onSelectInvert', 'onChange');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: (...rest) => {\n        var _a2;\n        var _a;\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        updatePrevSelectedIndex(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = useCallback(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'usage', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = _toConsumableArray(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      updatePrevSelectedIndex(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    let columnTitleCheckbox;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(({\n        disabled\n      }) => disabled);\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(({\n        checked\n      }) => checked);\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(({\n        checked\n      }) => checked);\n      columnTitleCheckbox = /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      });\n      title = !hideSelectAll && (/*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, columnTitleCheckbox, customizeSelections));\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        return {\n          node: (/*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxProps, {\n            checked: checked,\n            onClick: e => {\n              var _a;\n              e.stopPropagation();\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            },\n            onChange: event => {\n              var _a;\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, event);\n            }\n          }))),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'usage', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: (/*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => {\n              var _a;\n              e.stopPropagation();\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            },\n            onChange: event => {\n              var _a;\n              const {\n                nativeEvent\n              } = event;\n              const {\n                shiftKey\n              } = nativeEvent;\n              const currentSelectedIndex = recordKeys.findIndex(item => item === key);\n              const isMultiple = derivedSelectedKeys.some(item => recordKeys.includes(item));\n              if (shiftKey && checkStrictly && isMultiple) {\n                const changedKeys = multipleSelect(currentSelectedIndex, recordKeys, keySet);\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                updatePrevSelectedIndex(null);\n              } else {\n                updatePrevSelectedIndex(currentSelectedIndex);\n              }\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, event);\n            }\n          }))),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'usage', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    const columnCls = classNames(`${prefixCls}-selection-col`, {\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\n    });\n    const renderColumnTitle = () => {\n      if (!(rowSelection === null || rowSelection === void 0 ? void 0 : rowSelection.columnTitle)) {\n        return title;\n      }\n      if (typeof rowSelection.columnTitle === 'function') {\n        return rowSelection.columnTitle(columnTitleCheckbox);\n      }\n      return rowSelection.columnTitle;\n    };\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: renderColumnTitle(),\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell,\n      align: rowSelection.align,\n      [INTERNAL_COL_DEFINE]: {\n        className: columnCls\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nexport default useSelection;"]},"metadata":{},"sourceType":"module"}