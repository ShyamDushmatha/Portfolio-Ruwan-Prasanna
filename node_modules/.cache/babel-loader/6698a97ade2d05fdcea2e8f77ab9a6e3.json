{"ast":null,"code":"import _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { presetPrimaryColors } from '@ant-design/colors';\nexport function validProgress(progress) {\n  if (!progress || progress < 0) {\n    return 0;\n  }\n\n  if (progress > 100) {\n    return 100;\n  }\n\n  return progress;\n}\nexport function getSuccessPercent(_ref) {\n  var success = _ref.success,\n      successPercent = _ref.successPercent;\n  var percent = successPercent;\n  /** @deprecated Use `percent` instead */\n\n  if (success && 'progress' in success) {\n    percent = success.progress;\n  }\n\n  if (success && 'percent' in success) {\n    percent = success.percent;\n  }\n\n  return percent;\n}\nexport var getPercentage = function getPercentage(_ref2) {\n  var percent = _ref2.percent,\n      success = _ref2.success,\n      successPercent = _ref2.successPercent;\n  var realSuccessPercent = validProgress(getSuccessPercent({\n    success: success,\n    successPercent: successPercent\n  }));\n  return [realSuccessPercent, validProgress(validProgress(percent) - realSuccessPercent)];\n};\nexport var getStrokeColor = function getStrokeColor(_ref3) {\n  var _ref3$success = _ref3.success,\n      success = _ref3$success === void 0 ? {} : _ref3$success,\n      strokeColor = _ref3.strokeColor;\n  var successColor = success.strokeColor;\n  return [successColor || presetPrimaryColors.green, strokeColor || null];\n};\nexport var getSize = function getSize(size, type, extra) {\n  var _a, _b, _c, _d;\n\n  var width = -1;\n  var height = -1;\n\n  if (type === 'step') {\n    var steps = extra.steps;\n    var strokeWidth = extra.strokeWidth;\n\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      width = size === 'small' ? 2 : 14;\n      height = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 8;\n    } else if (typeof size === 'number') {\n      width = size;\n      height = size;\n    } else {\n      var _ref4 = Array.isArray(size) ? size : [size.width, size.height];\n\n      var _ref5 = _slicedToArray(_ref4, 2);\n\n      var _ref5$ = _ref5[0];\n      width = _ref5$ === void 0 ? 14 : _ref5$;\n      var _ref5$2 = _ref5[1];\n      height = _ref5$2 === void 0 ? 8 : _ref5$2;\n    }\n\n    width *= steps;\n  } else if (type === 'line') {\n    var _strokeWidth = extra === null || extra === void 0 ? void 0 : extra.strokeWidth;\n\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      height = _strokeWidth || (size === 'small' ? 6 : 8);\n    } else if (typeof size === 'number') {\n      width = size;\n      height = size;\n    } else {\n      var _ref6 = Array.isArray(size) ? size : [size.width, size.height];\n\n      var _ref7 = _slicedToArray(_ref6, 2);\n\n      var _ref7$ = _ref7[0];\n      width = _ref7$ === void 0 ? -1 : _ref7$;\n      var _ref7$2 = _ref7[1];\n      height = _ref7$2 === void 0 ? 8 : _ref7$2;\n    }\n  } else if (type === 'circle' || type === 'dashboard') {\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      var _ref8 = size === 'small' ? [60, 60] : [120, 120];\n\n      var _ref9 = _slicedToArray(_ref8, 2);\n\n      width = _ref9[0];\n      height = _ref9[1];\n    } else if (typeof size === 'number') {\n      width = size;\n      height = size;\n    } else if (Array.isArray(size)) {\n      width = (_b = (_a = size[0]) !== null && _a !== void 0 ? _a : size[1]) !== null && _b !== void 0 ? _b : 120;\n      height = (_d = (_c = size[0]) !== null && _c !== void 0 ? _c : size[1]) !== null && _d !== void 0 ? _d : 120;\n    }\n  }\n\n  return [width, height];\n};","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/progress/utils.js"],"names":["presetPrimaryColors","validProgress","progress","getSuccessPercent","success","successPercent","percent","getPercentage","realSuccessPercent","getStrokeColor","strokeColor","successColor","green","getSize","size","type","extra","_a","_b","_c","_d","width","height","steps","strokeWidth","Array","isArray"],"mappings":"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","sourcesContent":["import { presetPrimaryColors } from '@ant-design/colors';\nexport function validProgress(progress) {\n  if (!progress || progress < 0) {\n    return 0;\n  }\n  if (progress > 100) {\n    return 100;\n  }\n  return progress;\n}\nexport function getSuccessPercent({\n  success,\n  successPercent\n}) {\n  let percent = successPercent;\n  /** @deprecated Use `percent` instead */\n  if (success && 'progress' in success) {\n    percent = success.progress;\n  }\n  if (success && 'percent' in success) {\n    percent = success.percent;\n  }\n  return percent;\n}\nexport const getPercentage = ({\n  percent,\n  success,\n  successPercent\n}) => {\n  const realSuccessPercent = validProgress(getSuccessPercent({\n    success,\n    successPercent\n  }));\n  return [realSuccessPercent, validProgress(validProgress(percent) - realSuccessPercent)];\n};\nexport const getStrokeColor = ({\n  success = {},\n  strokeColor\n}) => {\n  const {\n    strokeColor: successColor\n  } = success;\n  return [successColor || presetPrimaryColors.green, strokeColor || null];\n};\nexport const getSize = (size, type, extra) => {\n  var _a, _b, _c, _d;\n  let width = -1;\n  let height = -1;\n  if (type === 'step') {\n    const steps = extra.steps;\n    const strokeWidth = extra.strokeWidth;\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      width = size === 'small' ? 2 : 14;\n      height = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 8;\n    } else if (typeof size === 'number') {\n      [width, height] = [size, size];\n    } else {\n      [width = 14, height = 8] = Array.isArray(size) ? size : [size.width, size.height];\n    }\n    width *= steps;\n  } else if (type === 'line') {\n    const strokeWidth = extra === null || extra === void 0 ? void 0 : extra.strokeWidth;\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      height = strokeWidth || (size === 'small' ? 6 : 8);\n    } else if (typeof size === 'number') {\n      [width, height] = [size, size];\n    } else {\n      [width = -1, height = 8] = Array.isArray(size) ? size : [size.width, size.height];\n    }\n  } else if (type === 'circle' || type === 'dashboard') {\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      [width, height] = size === 'small' ? [60, 60] : [120, 120];\n    } else if (typeof size === 'number') {\n      [width, height] = [size, size];\n    } else if (Array.isArray(size)) {\n      width = (_b = (_a = size[0]) !== null && _a !== void 0 ? _a : size[1]) !== null && _b !== void 0 ? _b : 120;\n      height = (_d = (_c = size[0]) !== null && _c !== void 0 ? _c : size[1]) !== null && _d !== void 0 ? _d : 120;\n    }\n  }\n  return [width, height];\n};"]},"metadata":{},"sourceType":"module"}