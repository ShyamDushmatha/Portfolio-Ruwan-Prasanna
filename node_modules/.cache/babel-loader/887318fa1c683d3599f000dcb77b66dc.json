{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { compute as t } from \"compute-scroll-into-view\";\n\nvar o = function o(t) {\n  return !1 === t ? {\n    block: \"end\",\n    inline: \"nearest\"\n  } : function (t) {\n    return t === Object(t) && 0 !== Object.keys(t).length;\n  }(t) ? t : {\n    block: \"start\",\n    inline: \"nearest\"\n  };\n};\n\nfunction e(e, r) {\n  if (!e.isConnected || !function (t) {\n    var o = t;\n\n    for (; o && o.parentNode;) {\n      if (o.parentNode === document) return !0;\n      o = o.parentNode instanceof ShadowRoot ? o.parentNode.host : o.parentNode;\n    }\n\n    return !1;\n  }(e)) return;\n\n  var n = function (t) {\n    var o = window.getComputedStyle(t);\n    return {\n      top: parseFloat(o.scrollMarginTop) || 0,\n      right: parseFloat(o.scrollMarginRight) || 0,\n      bottom: parseFloat(o.scrollMarginBottom) || 0,\n      left: parseFloat(o.scrollMarginLeft) || 0\n    };\n  }(e);\n\n  if (function (t) {\n    return \"object\" == typeof t && \"function\" == typeof t.behavior;\n  }(r)) return r.behavior(t(e, r));\n  var l = \"boolean\" == typeof r || null == r ? void 0 : r.behavior;\n\n  var _iterator = _createForOfIteratorHelper(t(e, o(r))),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n          a = _step$value.el,\n          i = _step$value.top,\n          s = _step$value.left;\n\n      var _t = i - n.top + n.bottom,\n          _o = s - n.left + n.right;\n\n      a.scroll({\n        top: _t,\n        left: _o,\n        behavior: l\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nexport { e as default };","map":{"version":3,"mappings":";;;AAgDA,IAUMA,IAAcC,SAAdD,CAAcC;AAAAA,UAEF,CAFEA,KAEdA,CAFcA,GAGT;AAAEC,WAAO,KAAT;AAAgBC,YAAQ;AAAxB,GAHSF,GATlBA;AAAAA,WAEAA,MAAYG,OAAOH,CAAPG,CAAZH,IAA+D,MAAhCG,OAAOC,IAAPD,CAAYH,CAAZG,EAAqBE,MAFpDL;AAAAA,IAe6BA,CAf7BA,IAiBSA,CAjBTA,GAqBO;AAAEC,WAAO,OAAT;AAAkBC,YAAQ;AAA1B,GAZWF;AAAAA,CAVpB;;AAkFA,SAASM,CAAT,CACEC,CADF,EAEEP,CAFF,EAEEA;AAGA,OAAKO,EAAOC,WAAZ,IAAYA,CAjDQC;AACpB,QAAIC,IAAiBD,CAArB;;AACO,gBAAkBC,EAAeC,UAAjC,GAA6C;AAC9C,YAAeA,UAAfD,KAA8BE,QAA9B,EACK;AAEPF,UADSA,EAAeC,UAAfD,YAAqCG,UAArCH,GACSA,EAAeC,UAAfD,CAAyCI,IADlDJ,GAGQA,EAAeC,UAFhCD;AAKG;;AAAA;AAAA,GAXaD,CAiDqBF,CAjDrBE,CAiDpB,EACE;;AAGI,UAlEkBF;AAClB,YAAgBQ,OAAOC,gBAAPD,CAAwBR,CAAxBQ,CAAhB;AACC;AACLE,WAAKC,WAAWC,EAAcC,eAAzBF,KAA6C,CAD7C;AAELG,aAAOH,WAAWC,EAAcG,iBAAzBJ,KAA+C,CAFjD;AAGLK,cAAQL,WAAWC,EAAcK,kBAAzBN,KAAgD,CAHnD;AAILO,YAAMP,WAAWC,EAAcO,gBAAzBR,KAA8C;AAJ/C;AAKP,GAPwBX,CAkESA,CAlETA,CAkElB;;AAEF,MAvFJP;AAAAA,WAEmB,mBAAZA,CAAY,IAAuC,qBAArBA,EAAQ2B,QAF7C3B;AAAAA,IAuF8BA,CAvF9BA,CAuFI,EACF,OAAOA,EAAQ2B,QAAR3B,CAAiB4B,EAAQrB,CAARqB,EAAgB5B,CAAhB4B,CAAjB5B,CAAP;AAGF,MAAM2B,IAA8B,oBAAZ3B,CAAY,IAAiC,QAATA,CAAxB,GAAwBA,KAAZ,CAAZ,GAAiCA,UAArE;;AAbAA,6CAegC4B,EAAQrB,CAARqB,EAAgB7B,EAAWC,CAAXD,CAAhB6B,CAfhC5B;AAAAA;;AAAAA;AAeW,wDAA2D;AAAA;AAAA,UAAzD6B,CAAyD,eAA3DA,EAA2D;AAAA,UAArDZ,CAAqD,eAArDA,GAAqD;AAAA,UAAhDQ,CAAgD,eAArDA,IAAqD;;AACpE,UAAMK,KAAcb,IAAMc,EAAQd,GAAdA,GAAoBc,EAAQR,MAAhD;AAAA,UACMS,KAAeP,IAAOM,EAAQN,IAAfA,GAAsBM,EAAQV,KADnD;;AAEAQ,QAAGI,MAAHJ,CAAU;AAAEZ,aAAKa,EAAP;AAAoBL,cAAMO,EAA1B;AAAwCL;AAAxC,OAAVE;AAEJ;AApBE7B;AAAAA;AAAAA;AAAAA;AAAAA;AAoBF;;AAAA","names":["getOptions","options","block","inline","Object","keys","length","scrollIntoView","target","isConnected","element","currentElement","parentNode","document","ShadowRoot","host","window","getComputedStyle","top","parseFloat","computedStyle","scrollMarginTop","right","scrollMarginRight","bottom","scrollMarginBottom","left","scrollMarginLeft","behavior","compute","el","adjustedTop","margins","adjustedLeft","scroll"],"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/scroll-into-view-if-needed/src/index.ts"],"sourcesContent":["import { compute } from 'compute-scroll-into-view'\nimport type {\n  Options as BaseOptions,\n  ScrollAction,\n} from 'compute-scroll-into-view'\n\n/** @public */\nexport type Options<T = unknown> =\n  | StandardBehaviorOptions\n  | CustomBehaviorOptions<T>\n\n/**\n * Only scrolls if the `node` is partially out of view:\n * ```ts\n * scrollIntoView(node, { scrollMode: 'if-needed' })\n * ```\n * Skips scrolling `overflow: hidden` elements:\n * ```ts\n * scrollIntoView(node, { skipOverflowHiddenElements: true })\n * ```\n * When scrolling is needed do the least and smoothest scrolling possible:\n * ```ts\n * scrollIntoView(node, {\n *   behavior: 'smooth',\n *   scrollMode: 'if-needed',\n *   block: 'nearest',\n *   inline: 'nearest',\n * })\n * ```\n * @public\n */\nexport interface StandardBehaviorOptions extends BaseOptions {\n  /**\n   * @defaultValue 'auto\n   */\n  behavior?: ScrollBehavior\n}\n\n/** @public */\nexport interface CustomBehaviorOptions<T = unknown> extends BaseOptions {\n  behavior: CustomScrollBehaviorCallback<T>\n}\n\n/** @public */\nexport type CustomScrollBehaviorCallback<T = unknown> = (\n  actions: ScrollAction[]\n) => T\n\nconst isStandardScrollBehavior = (\n  options: any\n): options is StandardBehaviorOptions =>\n  options === Object(options) && Object.keys(options).length !== 0\n\nconst isCustomScrollBehavior = <T = unknown>(\n  options: any\n): options is CustomBehaviorOptions<T> =>\n  typeof options === 'object' ? typeof options.behavior === 'function' : false\n\nconst getOptions = (options: any): StandardBehaviorOptions => {\n  // Handle alignToTop for legacy reasons, to be compatible with the spec\n  if (options === false) {\n    return { block: 'end', inline: 'nearest' }\n  }\n\n  if (isStandardScrollBehavior(options)) {\n    // compute.ts ensures the defaults are block: 'center' and inline: 'nearest', to conform to the spec\n    return options\n  }\n\n  // if options = {}, options = true or options = null, based on w3c web platform test\n  return { block: 'start', inline: 'nearest' }\n}\n\nconst getScrollMargins = (target: Element) => {\n  const computedStyle = window.getComputedStyle(target)\n  return {\n    top: parseFloat(computedStyle.scrollMarginTop) || 0,\n    right: parseFloat(computedStyle.scrollMarginRight) || 0,\n    bottom: parseFloat(computedStyle.scrollMarginBottom) || 0,\n    left: parseFloat(computedStyle.scrollMarginLeft) || 0,\n  }\n}\n\n// Determine if the element is part of the document (including shadow dom)\n// Derived from code of Andy Desmarais\n// https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/\nconst isInDocument = (element: Node) => {\n  let currentElement = element\n  while (currentElement && currentElement.parentNode) {\n    if (currentElement.parentNode === document) {\n      return true\n    } else if (currentElement.parentNode instanceof ShadowRoot) {\n      currentElement = (currentElement.parentNode as ShadowRoot).host\n    } else {\n      currentElement = currentElement.parentNode\n    }\n  }\n  return false\n}\n\n/**\n * Scrolls the given element into view, with options for when, and how.\n * Supports the same `options` as [`Element.prototype.scrollIntoView`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) with additions such as `scrollMode`, `behavior: Function` and `skipOverflowHiddenElements`.\n * @public\n */\nfunction scrollIntoView(\n  target: Element,\n  options?: StandardBehaviorOptions | boolean\n): void\n/**\n * Scrolls the given element into view, with options for when, and how.\n * Supports the same `options` as [`Element.prototype.scrollIntoView`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) with additions such as `scrollMode`, `behavior: Function` and `skipOverflowHiddenElements`.\n *\n * You can set the expected return type for `behavior: Function`:\n * ```ts\n * await scrollIntoView<Promise<boolean[]>>(node, {\n *   behavior: async actions => {\n *     return Promise.all(actions.map(\n *       // animate() resolves to `true` if anything was animated, `false` if the element already were in the end state\n *       ({ el, left, top }) => animate(el, {scroll: {left, top}})\n *     ))\n *   }\n * })\n * ```\n * @public\n */\nfunction scrollIntoView<T>(\n  target: Element,\n  options: CustomBehaviorOptions<T>\n): T\nfunction scrollIntoView<T = unknown>(\n  target: Element,\n  options?: StandardBehaviorOptions | CustomBehaviorOptions<T> | boolean\n): T | void {\n  // Browsers treats targets that aren't in the dom as a no-op and so should we\n  if (!target.isConnected || !isInDocument(target)) {\n    return\n  }\n\n  const margins = getScrollMargins(target)\n\n  if (isCustomScrollBehavior<T>(options)) {\n    return options.behavior(compute(target, options))\n  }\n\n  const behavior = typeof options === 'boolean' ? undefined : options?.behavior\n\n  for (const { el, top, left } of compute(target, getOptions(options))) {\n    const adjustedTop = top - margins.top + margins.bottom\n    const adjustedLeft = left - margins.left + margins.right\n    el.scroll({ top: adjustedTop, left: adjustedLeft, behavior })\n  }\n}\n\nexport default scrollIntoView\n"]},"metadata":{},"sourceType":"module"}