{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { PresetColors } from '../theme/interface';\nvar inverseColors = PresetColors.map(function (color) {\n  return \"\".concat(color, \"-inverse\");\n});\nexport var PresetStatusColorTypes = ['success', 'processing', 'error', 'default', 'warning'];\n/**\n * determine if the color keyword belongs to the `Ant Design` {@link PresetColors}.\n * @param color color to be judged\n * @param includeInverse whether to include reversed colors\n */\n\nexport function isPresetColor(color) {\n  var includeInverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (includeInverse) {\n    return [].concat(_toConsumableArray(inverseColors), _toConsumableArray(PresetColors)).includes(color);\n  }\n\n  return PresetColors.includes(color);\n}\nexport function isPresetStatusColor(color) {\n  return PresetStatusColorTypes.includes(color);\n}","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/_util/colors.js"],"names":["_toConsumableArray","PresetColors","inverseColors","map","color","PresetStatusColorTypes","isPresetColor","includeInverse","concat","includes","isPresetStatusColor"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,IAAMC,aAAa,GAAGD,YAAY,CAACE,GAAb,CAAiB,UAAAC,KAAK;AAAA,mBAAOA,KAAP;AAAA,CAAtB,CAAtB;AACA,OAAO,IAAMC,sBAAsB,GAAG,CAAC,SAAD,EAAY,YAAZ,EAA0B,OAA1B,EAAmC,SAAnC,EAA8C,SAA9C,CAA/B;AACP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBF,KAAvB,EAAqD;AAAA,MAAvBG,cAAuB,uEAAN,IAAM;;AAC1D,MAAIA,cAAJ,EAAoB;AAClB,WAAO,GAAGC,MAAH,CAAUR,kBAAkB,CAACE,aAAD,CAA5B,EAA6CF,kBAAkB,CAACC,YAAD,CAA/D,EAA+EQ,QAA/E,CAAwFL,KAAxF,CAAP;AACD;;AACD,SAAOH,YAAY,CAACQ,QAAb,CAAsBL,KAAtB,CAAP;AACD;AACD,OAAO,SAASM,mBAAT,CAA6BN,KAA7B,EAAoC;AACzC,SAAOC,sBAAsB,CAACI,QAAvB,CAAgCL,KAAhC,CAAP;AACD","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { PresetColors } from '../theme/interface';\nconst inverseColors = PresetColors.map(color => `${color}-inverse`);\nexport const PresetStatusColorTypes = ['success', 'processing', 'error', 'default', 'warning'];\n/**\n * determine if the color keyword belongs to the `Ant Design` {@link PresetColors}.\n * @param color color to be judged\n * @param includeInverse whether to include reversed colors\n */\nexport function isPresetColor(color, includeInverse = true) {\n  if (includeInverse) {\n    return [].concat(_toConsumableArray(inverseColors), _toConsumableArray(PresetColors)).includes(color);\n  }\n  return PresetColors.includes(color);\n}\nexport function isPresetStatusColor(color) {\n  return PresetStatusColorTypes.includes(color);\n}"]},"metadata":{},"sourceType":"module"}