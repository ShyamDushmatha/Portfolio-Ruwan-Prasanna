{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\"; // Firefox has low performance of map.\n\nvar CacheMap = /*#__PURE__*/function () {\n  function CacheMap() {\n    _classCallCheck(this, CacheMap);\n\n    _defineProperty(this, \"maps\", void 0); // Used for cache key\n    // `useMemo` no need to update if `id` not change\n\n\n    _defineProperty(this, \"id\", 0);\n\n    _defineProperty(this, \"diffRecords\", new Map());\n\n    this.maps = Object.create(null);\n  }\n\n  _createClass(CacheMap, [{\n    key: \"set\",\n    value: function set(key, value) {\n      // Record prev value\n      this.diffRecords.set(key, this.maps[key]);\n      this.maps[key] = value;\n      this.id += 1;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.maps[key];\n    }\n    /**\n     * CacheMap will record the key changed.\n     * To help to know what's update in the next render.\n     */\n\n  }, {\n    key: \"resetRecord\",\n    value: function resetRecord() {\n      this.diffRecords.clear();\n    }\n  }, {\n    key: \"getRecord\",\n    value: function getRecord() {\n      return this.diffRecords;\n    }\n  }]);\n\n  return CacheMap;\n}();\n\nexport default CacheMap;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/rc-virtual-list/es/utils/CacheMap.js"],"names":["_classCallCheck","_createClass","_defineProperty","CacheMap","Map","maps","Object","create","key","value","set","diffRecords","id","get","resetRecord","clear","getRecord"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,eAAP,MAA4B,2CAA5B,C,CACA;;AACA,IAAIC,QAAQ,GAAG,aAAa,YAAY;AACtC,WAASA,QAAT,GAAoB;AAClBH,IAAAA,eAAe,CAAC,IAAD,EAAOG,QAAP,CAAf;;AACAD,IAAAA,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,KAAK,CAApB,CAAf,CAFkB,CAGlB;AACA;;;AACAA,IAAAA,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,CAAb,CAAf;;AACAA,IAAAA,eAAe,CAAC,IAAD,EAAO,aAAP,EAAsB,IAAIE,GAAJ,EAAtB,CAAf;;AACA,SAAKC,IAAL,GAAYC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAZ;AACD;;AACDN,EAAAA,YAAY,CAACE,QAAD,EAAW,CAAC;AACtBK,IAAAA,GAAG,EAAE,KADiB;AAEtBC,IAAAA,KAAK,EAAE,SAASC,GAAT,CAAaF,GAAb,EAAkBC,KAAlB,EAAyB;AAC9B;AACA,WAAKE,WAAL,CAAiBD,GAAjB,CAAqBF,GAArB,EAA0B,KAAKH,IAAL,CAAUG,GAAV,CAA1B;AACA,WAAKH,IAAL,CAAUG,GAAV,IAAiBC,KAAjB;AACA,WAAKG,EAAL,IAAW,CAAX;AACD;AAPqB,GAAD,EAQpB;AACDJ,IAAAA,GAAG,EAAE,KADJ;AAEDC,IAAAA,KAAK,EAAE,SAASI,GAAT,CAAaL,GAAb,EAAkB;AACvB,aAAO,KAAKH,IAAL,CAAUG,GAAV,CAAP;AACD;AAED;AACJ;AACA;AACA;;AATK,GARoB,EAkBpB;AACDA,IAAAA,GAAG,EAAE,aADJ;AAEDC,IAAAA,KAAK,EAAE,SAASK,WAAT,GAAuB;AAC5B,WAAKH,WAAL,CAAiBI,KAAjB;AACD;AAJA,GAlBoB,EAuBpB;AACDP,IAAAA,GAAG,EAAE,WADJ;AAEDC,IAAAA,KAAK,EAAE,SAASO,SAAT,GAAqB;AAC1B,aAAO,KAAKL,WAAZ;AACD;AAJA,GAvBoB,CAAX,CAAZ;;AA6BA,SAAOR,QAAP;AACD,CAxC2B,EAA5B;;AAyCA,eAAeA,QAAf","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n// Firefox has low performance of map.\nvar CacheMap = /*#__PURE__*/function () {\n  function CacheMap() {\n    _classCallCheck(this, CacheMap);\n    _defineProperty(this, \"maps\", void 0);\n    // Used for cache key\n    // `useMemo` no need to update if `id` not change\n    _defineProperty(this, \"id\", 0);\n    _defineProperty(this, \"diffRecords\", new Map());\n    this.maps = Object.create(null);\n  }\n  _createClass(CacheMap, [{\n    key: \"set\",\n    value: function set(key, value) {\n      // Record prev value\n      this.diffRecords.set(key, this.maps[key]);\n      this.maps[key] = value;\n      this.id += 1;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.maps[key];\n    }\n\n    /**\n     * CacheMap will record the key changed.\n     * To help to know what's update in the next render.\n     */\n  }, {\n    key: \"resetRecord\",\n    value: function resetRecord() {\n      this.diffRecords.clear();\n    }\n  }, {\n    key: \"getRecord\",\n    value: function getRecord() {\n      return this.diffRecords;\n    }\n  }]);\n  return CacheMap;\n}();\nexport default CacheMap;"]},"metadata":{},"sourceType":"module"}