{"ast":null,"code":"import _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useEvent, useMergedState } from 'rc-util';\nvar EMPTY_KEYS = [];\n\nfunction filterKeys(keys, dataKeys) {\n  var filteredKeys = keys.filter(function (key) {\n    return dataKeys.has(key);\n  });\n  return keys.length === filteredKeys.length ? keys : filteredKeys;\n}\n\nfunction flattenKeys(keys) {\n  return Array.from(keys).join(';');\n}\n\nfunction useSelection(leftDataSource, rightDataSource, selectedKeys) {\n  // Prepare `dataSource` keys\n  var _React$useMemo = React.useMemo(function () {\n    return [new Set(leftDataSource.map(function (src) {\n      return src === null || src === void 0 ? void 0 : src.key;\n    })), new Set(rightDataSource.map(function (src) {\n      return src === null || src === void 0 ? void 0 : src.key;\n    }))];\n  }, [leftDataSource, rightDataSource]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      leftKeys = _React$useMemo2[0],\n      rightKeys = _React$useMemo2[1]; // Selected Keys\n\n\n  var _useMergedState = useMergedState(EMPTY_KEYS, {\n    value: selectedKeys\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSelectedKeys = _useMergedState2[0],\n      setMergedSelectedKeys = _useMergedState2[1];\n\n  var sourceSelectedKeys = React.useMemo(function () {\n    return filterKeys(mergedSelectedKeys, leftKeys);\n  }, [mergedSelectedKeys, leftKeys]);\n  var targetSelectedKeys = React.useMemo(function () {\n    return filterKeys(mergedSelectedKeys, rightKeys);\n  }, [mergedSelectedKeys, rightKeys]); // // Reset when data changed\n\n  React.useEffect(function () {\n    setMergedSelectedKeys([].concat(_toConsumableArray(filterKeys(mergedSelectedKeys, leftKeys)), _toConsumableArray(filterKeys(mergedSelectedKeys, rightKeys))));\n  }, [flattenKeys(leftKeys), flattenKeys(rightKeys)]); // Update keys\n\n  var setSourceSelectedKeys = useEvent(function (nextSrcKeys) {\n    setMergedSelectedKeys([].concat(_toConsumableArray(nextSrcKeys), _toConsumableArray(targetSelectedKeys)));\n  });\n  var setTargetSelectedKeys = useEvent(function (nextTargetKeys) {\n    setMergedSelectedKeys([].concat(_toConsumableArray(sourceSelectedKeys), _toConsumableArray(nextTargetKeys)));\n  });\n  return [// Keys\n  sourceSelectedKeys, targetSelectedKeys, // Updater\n  setSourceSelectedKeys, setTargetSelectedKeys];\n}\n\nexport default useSelection;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/transfer/hooks/useSelection.js"],"names":["_toConsumableArray","React","useEvent","useMergedState","EMPTY_KEYS","filterKeys","keys","dataKeys","filteredKeys","filter","key","has","length","flattenKeys","Array","from","join","useSelection","leftDataSource","rightDataSource","selectedKeys","useMemo","Set","map","src","leftKeys","rightKeys","value","mergedSelectedKeys","setMergedSelectedKeys","sourceSelectedKeys","targetSelectedKeys","useEffect","concat","setSourceSelectedKeys","nextSrcKeys","setTargetSelectedKeys","nextTargetKeys"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useEvent, useMergedState } from 'rc-util';\nconst EMPTY_KEYS = [];\nfunction filterKeys(keys, dataKeys) {\n  const filteredKeys = keys.filter(key => dataKeys.has(key));\n  return keys.length === filteredKeys.length ? keys : filteredKeys;\n}\nfunction flattenKeys(keys) {\n  return Array.from(keys).join(';');\n}\nfunction useSelection(leftDataSource, rightDataSource, selectedKeys) {\n  // Prepare `dataSource` keys\n  const [leftKeys, rightKeys] = React.useMemo(() => [new Set(leftDataSource.map(src => src === null || src === void 0 ? void 0 : src.key)), new Set(rightDataSource.map(src => src === null || src === void 0 ? void 0 : src.key))], [leftDataSource, rightDataSource]);\n  // Selected Keys\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(EMPTY_KEYS, {\n    value: selectedKeys\n  });\n  const sourceSelectedKeys = React.useMemo(() => filterKeys(mergedSelectedKeys, leftKeys), [mergedSelectedKeys, leftKeys]);\n  const targetSelectedKeys = React.useMemo(() => filterKeys(mergedSelectedKeys, rightKeys), [mergedSelectedKeys, rightKeys]);\n  // // Reset when data changed\n  React.useEffect(() => {\n    setMergedSelectedKeys([].concat(_toConsumableArray(filterKeys(mergedSelectedKeys, leftKeys)), _toConsumableArray(filterKeys(mergedSelectedKeys, rightKeys))));\n  }, [flattenKeys(leftKeys), flattenKeys(rightKeys)]);\n  // Update keys\n  const setSourceSelectedKeys = useEvent(nextSrcKeys => {\n    setMergedSelectedKeys([].concat(_toConsumableArray(nextSrcKeys), _toConsumableArray(targetSelectedKeys)));\n  });\n  const setTargetSelectedKeys = useEvent(nextTargetKeys => {\n    setMergedSelectedKeys([].concat(_toConsumableArray(sourceSelectedKeys), _toConsumableArray(nextTargetKeys)));\n  });\n  return [\n  // Keys\n  sourceSelectedKeys, targetSelectedKeys,\n  // Updater\n  setSourceSelectedKeys, setTargetSelectedKeys];\n}\nexport default useSelection;"]},"metadata":{},"sourceType":"module"}