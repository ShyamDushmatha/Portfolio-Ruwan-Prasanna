{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport useMessage from '../message/useMessage';\nimport useModal from '../modal/useModal';\nimport useNotification from '../notification/useNotification';\nimport AppContext, { AppConfigContext } from './context';\nimport useStyle from './style';\n\nvar App = function App(props) {\n  var customizePrefixCls = props.prefixCls,\n      children = props.children,\n      className = props.className,\n      rootClassName = props.rootClassName,\n      message = props.message,\n      notification = props.notification,\n      style = props.style,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'div' : _props$component;\n\n  var _useContext = useContext(ConfigContext),\n      direction = _useContext.direction,\n      getPrefixCls = _useContext.getPrefixCls;\n\n  var prefixCls = getPrefixCls('app', customizePrefixCls);\n\n  var _useStyle = useStyle(prefixCls),\n      _useStyle2 = _slicedToArray(_useStyle, 3),\n      wrapCSSVar = _useStyle2[0],\n      hashId = _useStyle2[1],\n      cssVarCls = _useStyle2[2];\n\n  var customClassName = classNames(hashId, prefixCls, className, rootClassName, cssVarCls, _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'));\n  var appConfig = useContext(AppConfigContext);\n  var mergedAppConfig = React.useMemo(function () {\n    return {\n      message: Object.assign(Object.assign({}, appConfig.message), message),\n      notification: Object.assign(Object.assign({}, appConfig.notification), notification)\n    };\n  }, [message, notification, appConfig.message, appConfig.notification]);\n\n  var _useMessage = useMessage(mergedAppConfig.message),\n      _useMessage2 = _slicedToArray(_useMessage, 2),\n      messageApi = _useMessage2[0],\n      messageContextHolder = _useMessage2[1];\n\n  var _useNotification = useNotification(mergedAppConfig.notification),\n      _useNotification2 = _slicedToArray(_useNotification, 2),\n      notificationApi = _useNotification2[0],\n      notificationContextHolder = _useNotification2[1];\n\n  var _useModal = useModal(),\n      _useModal2 = _slicedToArray(_useModal, 2),\n      ModalApi = _useModal2[0],\n      ModalContextHolder = _useModal2[1];\n\n  var memoizedContextValue = React.useMemo(function () {\n    return {\n      message: messageApi,\n      notification: notificationApi,\n      modal: ModalApi\n    };\n  }, [messageApi, notificationApi, ModalApi]); // https://github.com/ant-design/ant-design/issues/48802#issuecomment-2097813526\n\n  devUseWarning('App')(!(cssVarCls && component === false), 'usage', 'When using cssVar, ensure `component` is assigned a valid React component string.'); // ============================ Render ============================\n\n  var Component = component === false ? React.Fragment : component;\n  var rootProps = {\n    className: customClassName,\n    style: style\n  };\n  return wrapCSSVar( /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: memoizedContextValue\n  }, /*#__PURE__*/React.createElement(AppConfigContext.Provider, {\n    value: mergedAppConfig\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({}, component === false ? undefined : rootProps), ModalContextHolder, messageContextHolder, notificationContextHolder, children))));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  App.displayName = 'App';\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/app/App.js"],"names":["React","useContext","classNames","devUseWarning","ConfigContext","useMessage","useModal","useNotification","AppContext","AppConfigContext","useStyle","App","props","customizePrefixCls","prefixCls","children","className","rootClassName","message","notification","style","component","direction","getPrefixCls","wrapCSSVar","hashId","cssVarCls","customClassName","appConfig","mergedAppConfig","useMemo","Object","assign","messageApi","messageContextHolder","notificationApi","notificationContextHolder","ModalApi","ModalContextHolder","memoizedContextValue","modal","Component","Fragment","rootProps","createElement","Provider","value","undefined","process","env","NODE_ENV","displayName"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport useMessage from '../message/useMessage';\nimport useModal from '../modal/useModal';\nimport useNotification from '../notification/useNotification';\nimport AppContext, { AppConfigContext } from './context';\nimport useStyle from './style';\nconst App = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    children,\n    className,\n    rootClassName,\n    message,\n    notification,\n    style,\n    component = 'div'\n  } = props;\n  const {\n    direction,\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = getPrefixCls('app', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const customClassName = classNames(hashId, prefixCls, className, rootClassName, cssVarCls, {\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  });\n  const appConfig = useContext(AppConfigContext);\n  const mergedAppConfig = React.useMemo(() => ({\n    message: Object.assign(Object.assign({}, appConfig.message), message),\n    notification: Object.assign(Object.assign({}, appConfig.notification), notification)\n  }), [message, notification, appConfig.message, appConfig.notification]);\n  const [messageApi, messageContextHolder] = useMessage(mergedAppConfig.message);\n  const [notificationApi, notificationContextHolder] = useNotification(mergedAppConfig.notification);\n  const [ModalApi, ModalContextHolder] = useModal();\n  const memoizedContextValue = React.useMemo(() => ({\n    message: messageApi,\n    notification: notificationApi,\n    modal: ModalApi\n  }), [messageApi, notificationApi, ModalApi]);\n  // https://github.com/ant-design/ant-design/issues/48802#issuecomment-2097813526\n  devUseWarning('App')(!(cssVarCls && component === false), 'usage', 'When using cssVar, ensure `component` is assigned a valid React component string.');\n  // ============================ Render ============================\n  const Component = component === false ? React.Fragment : component;\n  const rootProps = {\n    className: customClassName,\n    style\n  };\n  return wrapCSSVar(/*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: memoizedContextValue\n  }, /*#__PURE__*/React.createElement(AppConfigContext.Provider, {\n    value: mergedAppConfig\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({}, component === false ? undefined : rootProps), ModalContextHolder, messageContextHolder, notificationContextHolder, children))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  App.displayName = 'App';\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}