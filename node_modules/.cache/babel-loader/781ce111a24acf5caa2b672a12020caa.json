{"ast":null,"code":"import _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { useLocale } from '../../locale';\nimport { generateColor } from '../util';\n/**\n * Combine the `color` and `mode` to make sure sync of state.\n */\n\nexport default function useModeColor(defaultValue, value, mode) {\n  var _useLocale = useLocale('ColorPicker'),\n      _useLocale2 = _slicedToArray(_useLocale, 1),\n      locale = _useLocale2[0]; // ======================== Base ========================\n  // Color\n\n\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedColor = _useMergedState2[0],\n      setMergedColor = _useMergedState2[1]; // Mode\n\n\n  var _React$useState = React.useState('single'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      modeState = _React$useState2[0],\n      setModeState = _React$useState2[1];\n\n  var _React$useMemo = React.useMemo(function () {\n    var list = (Array.isArray(mode) ? mode : [mode]).filter(function (m) {\n      return m;\n    });\n\n    if (!list.length) {\n      list.push('single');\n    }\n\n    var modes = new Set(list);\n    var optionList = [];\n\n    var pushOption = function pushOption(modeType, localeTxt) {\n      if (modes.has(modeType)) {\n        optionList.push({\n          label: localeTxt,\n          value: modeType\n        });\n      }\n    };\n\n    pushOption('single', locale.singleColor);\n    pushOption('gradient', locale.gradientColor);\n    return [optionList, modes];\n  }, [mode]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      modeOptionList = _React$useMemo2[0],\n      modeSet = _React$useMemo2[1]; // ======================== Post ========================\n  // We need align `mode` with `color` state\n  // >>>>> Color\n\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      cacheColor = _React$useState4[0],\n      setCacheColor = _React$useState4[1];\n\n  var setColor = useEvent(function (nextColor) {\n    setCacheColor(nextColor);\n    setMergedColor(nextColor);\n  });\n  var postColor = React.useMemo(function () {\n    var colorObj = generateColor(mergedColor || ''); // Use `cacheColor` in case the color is `cleared`\n\n    return colorObj.equals(cacheColor) ? cacheColor : colorObj;\n  }, [mergedColor, cacheColor]); // >>>>> Mode\n\n  var postMode = React.useMemo(function () {\n    var _a;\n\n    if (modeSet.has(modeState)) {\n      return modeState;\n    }\n\n    return (_a = modeOptionList[0]) === null || _a === void 0 ? void 0 : _a.value;\n  }, [modeSet, modeState, modeOptionList]); // ======================= Effect =======================\n  // Dynamic update mode when color change\n\n  React.useEffect(function () {\n    setModeState(postColor.isGradient() ? 'gradient' : 'single');\n  }, [postColor]); // ======================= Return =======================\n\n  return [postColor, setColor, postMode, setModeState, modeOptionList];\n}","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/color-picker/hooks/useModeColor.js"],"names":["React","useEvent","useMergedState","useLocale","generateColor","useModeColor","defaultValue","value","mode","locale","mergedColor","setMergedColor","useState","modeState","setModeState","useMemo","list","Array","isArray","filter","m","length","push","modes","Set","optionList","pushOption","modeType","localeTxt","has","label","singleColor","gradientColor","modeOptionList","modeSet","cacheColor","setCacheColor","setColor","nextColor","postColor","colorObj","equals","postMode","_a","useEffect","isGradient"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { useLocale } from '../../locale';\nimport { generateColor } from '../util';\n/**\n * Combine the `color` and `mode` to make sure sync of state.\n */\nexport default function useModeColor(defaultValue, value, mode) {\n  const [locale] = useLocale('ColorPicker');\n  // ======================== Base ========================\n  // Color\n  const [mergedColor, setMergedColor] = useMergedState(defaultValue, {\n    value\n  });\n  // Mode\n  const [modeState, setModeState] = React.useState('single');\n  const [modeOptionList, modeSet] = React.useMemo(() => {\n    const list = (Array.isArray(mode) ? mode : [mode]).filter(m => m);\n    if (!list.length) {\n      list.push('single');\n    }\n    const modes = new Set(list);\n    const optionList = [];\n    const pushOption = (modeType, localeTxt) => {\n      if (modes.has(modeType)) {\n        optionList.push({\n          label: localeTxt,\n          value: modeType\n        });\n      }\n    };\n    pushOption('single', locale.singleColor);\n    pushOption('gradient', locale.gradientColor);\n    return [optionList, modes];\n  }, [mode]);\n  // ======================== Post ========================\n  // We need align `mode` with `color` state\n  // >>>>> Color\n  const [cacheColor, setCacheColor] = React.useState(null);\n  const setColor = useEvent(nextColor => {\n    setCacheColor(nextColor);\n    setMergedColor(nextColor);\n  });\n  const postColor = React.useMemo(() => {\n    const colorObj = generateColor(mergedColor || '');\n    // Use `cacheColor` in case the color is `cleared`\n    return colorObj.equals(cacheColor) ? cacheColor : colorObj;\n  }, [mergedColor, cacheColor]);\n  // >>>>> Mode\n  const postMode = React.useMemo(() => {\n    var _a;\n    if (modeSet.has(modeState)) {\n      return modeState;\n    }\n    return (_a = modeOptionList[0]) === null || _a === void 0 ? void 0 : _a.value;\n  }, [modeSet, modeState, modeOptionList]);\n  // ======================= Effect =======================\n  // Dynamic update mode when color change\n  React.useEffect(() => {\n    setModeState(postColor.isGradient() ? 'gradient' : 'single');\n  }, [postColor]);\n  // ======================= Return =======================\n  return [postColor, setColor, postMode, setModeState, modeOptionList];\n}"]},"metadata":{},"sourceType":"module"}