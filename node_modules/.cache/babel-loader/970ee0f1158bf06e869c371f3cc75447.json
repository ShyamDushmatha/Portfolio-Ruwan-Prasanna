{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport classnames from 'classnames'; // ========================= ClassNames =========================\n\nexport function mergeClassNames(schema) {\n  var mergedSchema = schema || {};\n\n  for (var _len = arguments.length, classNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    classNames[_key - 1] = arguments[_key];\n  }\n\n  return classNames.reduce(function (acc, cur) {\n    // Loop keys of the current classNames\n    Object.keys(cur || {}).forEach(function (key) {\n      var keySchema = mergedSchema[key];\n      var curVal = cur[key];\n\n      if (keySchema && typeof keySchema === 'object') {\n        if (curVal && typeof curVal === 'object') {\n          // Loop fill\n          acc[key] = mergeClassNames(keySchema, acc[key], curVal);\n        } else {\n          // Covert string to object structure\n          var defaultField = keySchema._default;\n          acc[key] = acc[key] || {};\n          acc[key][defaultField] = classnames(acc[key][defaultField], curVal);\n        }\n      } else {\n        // Flatten fill\n        acc[key] = classnames(acc[key], curVal);\n      }\n    });\n    return acc;\n  }, {});\n}\n\nfunction useSemanticClassNames(schema) {\n  for (var _len2 = arguments.length, classNames = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    classNames[_key2 - 1] = arguments[_key2];\n  }\n\n  return React.useMemo(function () {\n    return mergeClassNames.apply(void 0, [schema].concat(classNames));\n  }, [classNames]);\n} // =========================== Styles ===========================\n\n\nfunction useSemanticStyles() {\n  for (var _len3 = arguments.length, styles = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    styles[_key3] = arguments[_key3];\n  }\n\n  return React.useMemo(function () {\n    return styles.reduce(function (acc) {\n      var cur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      Object.keys(cur).forEach(function (key) {\n        acc[key] = Object.assign(Object.assign({}, acc[key]), cur[key]);\n      });\n      return acc;\n    }, {});\n  }, [styles]);\n} // =========================== Export ===========================\n\n\nfunction fillObjectBySchema(obj, schema) {\n  var newObj = Object.assign({}, obj);\n  Object.keys(schema).forEach(function (key) {\n    if (key !== '_default') {\n      var nestSchema = schema[key];\n      var nextValue = newObj[key] || {};\n      newObj[key] = nestSchema ? fillObjectBySchema(nextValue, nestSchema) : nextValue;\n    }\n  });\n  return newObj;\n}\n/**\n * Merge classNames and styles from multiple sources.\n * When `schema` is provided, it will **must** provide the nest object structure.\n */\n\n\nexport default function useMergeSemantic(classNamesList, stylesList, schema) {\n  var mergedClassNames = useSemanticClassNames.apply(void 0, [schema].concat(_toConsumableArray(classNamesList)));\n  var mergedStyles = useSemanticStyles.apply(void 0, _toConsumableArray(stylesList));\n  return React.useMemo(function () {\n    return [fillObjectBySchema(mergedClassNames, schema), fillObjectBySchema(mergedStyles, schema)];\n  }, [mergedClassNames, mergedStyles]);\n}","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/_util/hooks/useMergeSemantic/index.js"],"names":["_toConsumableArray","React","classnames","mergeClassNames","schema","mergedSchema","classNames","reduce","acc","cur","Object","keys","forEach","key","keySchema","curVal","defaultField","_default","useSemanticClassNames","useMemo","apply","concat","useSemanticStyles","styles","assign","fillObjectBySchema","obj","newObj","nestSchema","nextValue","useMergeSemantic","classNamesList","stylesList","mergedClassNames","mergedStyles"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport classnames from 'classnames';\n// ========================= ClassNames =========================\nexport function mergeClassNames(schema, ...classNames) {\n  const mergedSchema = schema || {};\n  return classNames.reduce((acc, cur) => {\n    // Loop keys of the current classNames\n    Object.keys(cur || {}).forEach(key => {\n      const keySchema = mergedSchema[key];\n      const curVal = cur[key];\n      if (keySchema && typeof keySchema === 'object') {\n        if (curVal && typeof curVal === 'object') {\n          // Loop fill\n          acc[key] = mergeClassNames(keySchema, acc[key], curVal);\n        } else {\n          // Covert string to object structure\n          const {\n            _default: defaultField\n          } = keySchema;\n          acc[key] = acc[key] || {};\n          acc[key][defaultField] = classnames(acc[key][defaultField], curVal);\n        }\n      } else {\n        // Flatten fill\n        acc[key] = classnames(acc[key], curVal);\n      }\n    });\n    return acc;\n  }, {});\n}\nfunction useSemanticClassNames(schema, ...classNames) {\n  return React.useMemo(() => mergeClassNames.apply(void 0, [schema].concat(classNames)), [classNames]);\n}\n// =========================== Styles ===========================\nfunction useSemanticStyles(...styles) {\n  return React.useMemo(() => {\n    return styles.reduce((acc, cur = {}) => {\n      Object.keys(cur).forEach(key => {\n        acc[key] = Object.assign(Object.assign({}, acc[key]), cur[key]);\n      });\n      return acc;\n    }, {});\n  }, [styles]);\n}\n// =========================== Export ===========================\nfunction fillObjectBySchema(obj, schema) {\n  const newObj = Object.assign({}, obj);\n  Object.keys(schema).forEach(key => {\n    if (key !== '_default') {\n      const nestSchema = schema[key];\n      const nextValue = newObj[key] || {};\n      newObj[key] = nestSchema ? fillObjectBySchema(nextValue, nestSchema) : nextValue;\n    }\n  });\n  return newObj;\n}\n/**\n * Merge classNames and styles from multiple sources.\n * When `schema` is provided, it will **must** provide the nest object structure.\n */\nexport default function useMergeSemantic(classNamesList, stylesList, schema) {\n  const mergedClassNames = useSemanticClassNames.apply(void 0, [schema].concat(_toConsumableArray(classNamesList)));\n  const mergedStyles = useSemanticStyles.apply(void 0, _toConsumableArray(stylesList));\n  return React.useMemo(() => {\n    return [fillObjectBySchema(mergedClassNames, schema), fillObjectBySchema(mergedStyles, schema)];\n  }, [mergedClassNames, mergedStyles]);\n}"]},"metadata":{},"sourceType":"module"}