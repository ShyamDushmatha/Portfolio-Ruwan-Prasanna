{"ast":null,"code":"import { isValidElement, useMemo } from 'react';\n\nvar useTooltipProps = function useTooltipProps(tooltip, editConfigText, children) {\n  return useMemo(function () {\n    if (tooltip === true) {\n      return {\n        title: editConfigText !== null && editConfigText !== void 0 ? editConfigText : children\n      };\n    }\n\n    if ( /*#__PURE__*/isValidElement(tooltip)) {\n      return {\n        title: tooltip\n      };\n    }\n\n    if (typeof tooltip === 'object') {\n      return Object.assign({\n        title: editConfigText !== null && editConfigText !== void 0 ? editConfigText : children\n      }, tooltip);\n    }\n\n    return {\n      title: tooltip\n    };\n  }, [tooltip, editConfigText, children]);\n};\n\nexport default useTooltipProps;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/typography/hooks/useTooltipProps.js"],"names":["isValidElement","useMemo","useTooltipProps","tooltip","editConfigText","children","title","Object","assign"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,QAAwC,OAAxC;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B;AAAA,SAAuCJ,OAAO,CAAC,YAAM;AAC3E,QAAIE,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAO;AACLG,QAAAA,KAAK,EAAEF,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuDA,cAAvD,GAAwEC;AAD1E,OAAP;AAGD;;AACD,SAAI,aAAaL,cAAc,CAACG,OAAD,CAA/B,EAA0C;AACxC,aAAO;AACLG,QAAAA,KAAK,EAAEH;AADF,OAAP;AAGD;;AACD,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,aAAOI,MAAM,CAACC,MAAP,CAAc;AACnBF,QAAAA,KAAK,EAAEF,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuDA,cAAvD,GAAwEC;AAD5D,OAAd,EAEJF,OAFI,CAAP;AAGD;;AACD,WAAO;AACLG,MAAAA,KAAK,EAAEH;AADF,KAAP;AAGD,GAnBqE,EAmBnE,CAACA,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,CAnBmE,CAA9C;AAAA,CAAxB;;AAoBA,eAAeH,eAAf","sourcesContent":["import { isValidElement, useMemo } from 'react';\nconst useTooltipProps = (tooltip, editConfigText, children) => useMemo(() => {\n  if (tooltip === true) {\n    return {\n      title: editConfigText !== null && editConfigText !== void 0 ? editConfigText : children\n    };\n  }\n  if (/*#__PURE__*/isValidElement(tooltip)) {\n    return {\n      title: tooltip\n    };\n  }\n  if (typeof tooltip === 'object') {\n    return Object.assign({\n      title: editConfigText !== null && editConfigText !== void 0 ? editConfigText : children\n    }, tooltip);\n  }\n  return {\n    title: tooltip\n  };\n}, [tooltip, editConfigText, children]);\nexport default useTooltipProps;"]},"metadata":{},"sourceType":"module"}