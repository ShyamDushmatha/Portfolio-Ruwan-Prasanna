{"ast":null,"code":"import _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning'; // Calculate the sum of span in a row\n\nfunction getCalcRows(rowItems, mergedColumn) {\n  var rows = [];\n  var tmpRow = [];\n  var exceed = false;\n  var count = 0;\n  rowItems.filter(function (n) {\n    return n;\n  }).forEach(function (rowItem) {\n    var filled = rowItem.filled,\n        restItem = __rest(rowItem, [\"filled\"]);\n\n    if (filled) {\n      tmpRow.push(restItem);\n      rows.push(tmpRow); // reset\n\n      tmpRow = [];\n      count = 0;\n      return;\n    }\n\n    var restSpan = mergedColumn - count;\n    count += rowItem.span || 1;\n\n    if (count >= mergedColumn) {\n      if (count > mergedColumn) {\n        exceed = true;\n        tmpRow.push(Object.assign(Object.assign({}, restItem), {\n          span: restSpan\n        }));\n      } else {\n        tmpRow.push(restItem);\n      }\n\n      rows.push(tmpRow); // reset\n\n      tmpRow = [];\n      count = 0;\n    } else {\n      tmpRow.push(restItem);\n    }\n  });\n\n  if (tmpRow.length > 0) {\n    rows.push(tmpRow);\n  }\n\n  rows = rows.map(function (rows) {\n    var count = rows.reduce(function (acc, item) {\n      return acc + (item.span || 1);\n    }, 0);\n\n    if (count < mergedColumn) {\n      // If the span of the last element in the current row is less than the column, then add its span to the remaining columns\n      var last = rows[rows.length - 1];\n      last.span = mergedColumn - (count - (last.span || 1));\n      return rows;\n    }\n\n    return rows;\n  });\n  return [rows, exceed];\n}\n\nvar useRow = function useRow(mergedColumn, items) {\n  var _useMemo = useMemo(function () {\n    return getCalcRows(items, mergedColumn);\n  }, [items, mergedColumn]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      rows = _useMemo2[0],\n      exceed = _useMemo2[1];\n\n  if (process.env.NODE_ENV !== 'production') {\n    var warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n\n  return rows;\n};\n\nexport default useRow;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/descriptions/hooks/useRow.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useMemo","devUseWarning","getCalcRows","rowItems","mergedColumn","rows","tmpRow","exceed","count","filter","n","forEach","rowItem","filled","restItem","push","restSpan","span","assign","map","reduce","acc","item","last","useRow","items","process","env","NODE_ENV","warning"],"mappings":"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","sourcesContent":["var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning';\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  let rows = [];\n  let tmpRow = [];\n  let exceed = false;\n  let count = 0;\n  rowItems.filter(n => n).forEach(rowItem => {\n    const {\n        filled\n      } = rowItem,\n      restItem = __rest(rowItem, [\"filled\"]);\n    if (filled) {\n      tmpRow.push(restItem);\n      rows.push(tmpRow);\n      // reset\n      tmpRow = [];\n      count = 0;\n      return;\n    }\n    const restSpan = mergedColumn - count;\n    count += rowItem.span || 1;\n    if (count >= mergedColumn) {\n      if (count > mergedColumn) {\n        exceed = true;\n        tmpRow.push(Object.assign(Object.assign({}, restItem), {\n          span: restSpan\n        }));\n      } else {\n        tmpRow.push(restItem);\n      }\n      rows.push(tmpRow);\n      // reset\n      tmpRow = [];\n      count = 0;\n    } else {\n      tmpRow.push(restItem);\n    }\n  });\n  if (tmpRow.length > 0) {\n    rows.push(tmpRow);\n  }\n  rows = rows.map(rows => {\n    const count = rows.reduce((acc, item) => acc + (item.span || 1), 0);\n    if (count < mergedColumn) {\n      // If the span of the last element in the current row is less than the column, then add its span to the remaining columns\n      const last = rows[rows.length - 1];\n      last.span = mergedColumn - (count - (last.span || 1));\n      return rows;\n    }\n    return rows;\n  });\n  return [rows, exceed];\n}\nconst useRow = (mergedColumn, items) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nexport default useRow;"]},"metadata":{},"sourceType":"module"}