{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport EnterOutlined from \"@ant-design/icons/es/icons/EnterOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { cloneElement } from '../_util/reactNode';\nimport TextArea from '../input/TextArea';\nimport useStyle from './style';\n\nvar Editable = function Editable(props) {\n  var _classNames;\n\n  var prefixCls = props.prefixCls,\n      ariaLabel = props['aria-label'],\n      className = props.className,\n      style = props.style,\n      direction = props.direction,\n      maxLength = props.maxLength,\n      _props$autoSize = props.autoSize,\n      autoSize = _props$autoSize === void 0 ? true : _props$autoSize,\n      value = props.value,\n      onSave = props.onSave,\n      onCancel = props.onCancel,\n      onEnd = props.onEnd,\n      component = props.component,\n      _props$enterIcon = props.enterIcon,\n      enterIcon = _props$enterIcon === void 0 ? /*#__PURE__*/React.createElement(EnterOutlined, null) : _props$enterIcon;\n  var ref = React.useRef(null);\n  var inComposition = React.useRef(false);\n  var lastKeyCode = React.useRef(null);\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      current = _React$useState2[0],\n      setCurrent = _React$useState2[1];\n\n  React.useEffect(function () {\n    setCurrent(value);\n  }, [value]);\n  React.useEffect(function () {\n    var _a;\n\n    if ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) {\n      var textArea = ref.current.resizableTextArea.textArea;\n      textArea.focus();\n      var length = textArea.value.length;\n      textArea.setSelectionRange(length, length);\n    }\n  }, []);\n\n  var onChange = function onChange(_ref) {\n    var target = _ref.target;\n    setCurrent(target.value.replace(/[\\n\\r]/g, ''));\n  };\n\n  var onCompositionStart = function onCompositionStart() {\n    inComposition.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    inComposition.current = false;\n  };\n\n  var onKeyDown = function onKeyDown(_ref2) {\n    var keyCode = _ref2.keyCode;\n    // We don't record keyCode when IME is using\n    if (inComposition.current) return;\n    lastKeyCode.current = keyCode;\n  };\n\n  var confirmChange = function confirmChange() {\n    onSave(current.trim());\n  };\n\n  var onKeyUp = function onKeyUp(_ref3) {\n    var keyCode = _ref3.keyCode,\n        ctrlKey = _ref3.ctrlKey,\n        altKey = _ref3.altKey,\n        metaKey = _ref3.metaKey,\n        shiftKey = _ref3.shiftKey;\n\n    // Check if it's a real key\n    if (lastKeyCode.current !== keyCode || inComposition.current || ctrlKey || altKey || metaKey || shiftKey) {\n      return;\n    }\n\n    if (keyCode === KeyCode.ENTER) {\n      confirmChange();\n      onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n    } else if (keyCode === KeyCode.ESC) {\n      onCancel();\n    }\n  };\n\n  var onBlur = function onBlur() {\n    confirmChange();\n  };\n\n  var _useStyle = useStyle(prefixCls),\n      _useStyle2 = _slicedToArray(_useStyle, 3),\n      wrapCSSVar = _useStyle2[0],\n      hashId = _useStyle2[1],\n      cssVarCls = _useStyle2[2];\n\n  var textAreaClassName = classNames(prefixCls, \"\".concat(prefixCls, \"-edit-content\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(component), !!component), _classNames), className, hashId, cssVarCls);\n  return wrapCSSVar( /*#__PURE__*/React.createElement(\"div\", {\n    className: textAreaClassName,\n    style: style\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: ref,\n    maxLength: maxLength,\n    value: current,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBlur: onBlur,\n    \"aria-label\": ariaLabel,\n    rows: 1,\n    autoSize: autoSize\n  }), enterIcon !== null ? cloneElement(enterIcon, {\n    className: \"\".concat(prefixCls, \"-edit-content-confirm\")\n  }) : null));\n};\n\nexport default Editable;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/typography/Editable.js"],"names":["React","EnterOutlined","classNames","KeyCode","cloneElement","TextArea","useStyle","Editable","props","prefixCls","ariaLabel","className","style","direction","maxLength","autoSize","value","onSave","onCancel","onEnd","component","enterIcon","createElement","ref","useRef","inComposition","lastKeyCode","useState","current","setCurrent","useEffect","_a","resizableTextArea","textArea","focus","length","setSelectionRange","onChange","target","replace","onCompositionStart","onCompositionEnd","onKeyDown","keyCode","confirmChange","trim","onKeyUp","ctrlKey","altKey","metaKey","shiftKey","ENTER","ESC","onBlur","wrapCSSVar","hashId","cssVarCls","textAreaClassName","rows"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport EnterOutlined from \"@ant-design/icons/es/icons/EnterOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { cloneElement } from '../_util/reactNode';\nimport TextArea from '../input/TextArea';\nimport useStyle from './style';\nconst Editable = props => {\n  const {\n    prefixCls,\n    'aria-label': ariaLabel,\n    className,\n    style,\n    direction,\n    maxLength,\n    autoSize = true,\n    value,\n    onSave,\n    onCancel,\n    onEnd,\n    component,\n    enterIcon = /*#__PURE__*/React.createElement(EnterOutlined, null)\n  } = props;\n  const ref = React.useRef(null);\n  const inComposition = React.useRef(false);\n  const lastKeyCode = React.useRef(null);\n  const [current, setCurrent] = React.useState(value);\n  React.useEffect(() => {\n    setCurrent(value);\n  }, [value]);\n  React.useEffect(() => {\n    var _a;\n    if ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) {\n      const {\n        textArea\n      } = ref.current.resizableTextArea;\n      textArea.focus();\n      const {\n        length\n      } = textArea.value;\n      textArea.setSelectionRange(length, length);\n    }\n  }, []);\n  const onChange = ({\n    target\n  }) => {\n    setCurrent(target.value.replace(/[\\n\\r]/g, ''));\n  };\n  const onCompositionStart = () => {\n    inComposition.current = true;\n  };\n  const onCompositionEnd = () => {\n    inComposition.current = false;\n  };\n  const onKeyDown = ({\n    keyCode\n  }) => {\n    // We don't record keyCode when IME is using\n    if (inComposition.current) return;\n    lastKeyCode.current = keyCode;\n  };\n  const confirmChange = () => {\n    onSave(current.trim());\n  };\n  const onKeyUp = ({\n    keyCode,\n    ctrlKey,\n    altKey,\n    metaKey,\n    shiftKey\n  }) => {\n    // Check if it's a real key\n    if (lastKeyCode.current !== keyCode || inComposition.current || ctrlKey || altKey || metaKey || shiftKey) {\n      return;\n    }\n    if (keyCode === KeyCode.ENTER) {\n      confirmChange();\n      onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n    } else if (keyCode === KeyCode.ESC) {\n      onCancel();\n    }\n  };\n  const onBlur = () => {\n    confirmChange();\n  };\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const textAreaClassName = classNames(prefixCls, `${prefixCls}-edit-content`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-${component}`]: !!component\n  }, className, hashId, cssVarCls);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", {\n    className: textAreaClassName,\n    style: style\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: ref,\n    maxLength: maxLength,\n    value: current,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBlur: onBlur,\n    \"aria-label\": ariaLabel,\n    rows: 1,\n    autoSize: autoSize\n  }), enterIcon !== null ? cloneElement(enterIcon, {\n    className: `${prefixCls}-edit-content-confirm`\n  }) : null));\n};\nexport default Editable;"]},"metadata":{},"sourceType":"module"}