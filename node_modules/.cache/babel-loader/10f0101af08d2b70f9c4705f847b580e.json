{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nvar UnitNumber = function UnitNumber(props) {\n  var prefixCls = props.prefixCls,\n      value = props.value,\n      current = props.current,\n      _props$offset = props.offset,\n      offset = _props$offset === void 0 ? 0 : _props$offset;\n  var style;\n\n  if (offset) {\n    style = {\n      position: 'absolute',\n      top: \"\".concat(offset, \"00%\"),\n      left: 0\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: style,\n    className: classNames(\"\".concat(prefixCls, \"-only-unit\"), {\n      current: current\n    })\n  }, value);\n};\n\nfunction getOffset(start, end, unit) {\n  var index = start;\n  var offset = 0;\n\n  while ((index + 10) % 10 !== end) {\n    index += unit;\n    offset += unit;\n  }\n\n  return offset;\n}\n\nvar SingleNumber = function SingleNumber(props) {\n  var prefixCls = props.prefixCls,\n      originCount = props.count,\n      originValue = props.value;\n  var value = Number(originValue);\n  var count = Math.abs(originCount);\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      prevValue = _React$useState2[0],\n      setPrevValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(count),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      prevCount = _React$useState4[0],\n      setPrevCount = _React$useState4[1]; // ============================= Events =============================\n\n\n  var onTransitionEnd = function onTransitionEnd() {\n    setPrevValue(value);\n    setPrevCount(count);\n  }; // Fallback if transition events are not supported\n\n\n  React.useEffect(function () {\n    var timer = setTimeout(onTransitionEnd, 1000);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [value]); // ============================= Render =============================\n  // Render unit list\n\n  var unitNodes;\n  var offsetStyle;\n\n  if (prevValue === value || Number.isNaN(value) || Number.isNaN(prevValue)) {\n    // Nothing to change\n    unitNodes = [/*#__PURE__*/React.createElement(UnitNumber, Object.assign({}, props, {\n      key: value,\n      current: true\n    }))];\n    offsetStyle = {\n      transition: 'none'\n    };\n  } else {\n    unitNodes = []; // Fill basic number units\n\n    var end = value + 10;\n    var unitNumberList = [];\n\n    for (var index = value; index <= end; index += 1) {\n      unitNumberList.push(index);\n    }\n\n    var unit = prevCount < count ? 1 : -1; // Fill with number unit nodes\n\n    var prevIndex = unitNumberList.findIndex(function (n) {\n      return n % 10 === prevValue;\n    }); // Cut list\n\n    var cutUnitNumberList = unit < 0 ? unitNumberList.slice(0, prevIndex + 1) : unitNumberList.slice(prevIndex);\n    unitNodes = cutUnitNumberList.map(function (n, index) {\n      var singleUnit = n % 10;\n      return /*#__PURE__*/React.createElement(UnitNumber, Object.assign({}, props, {\n        key: n,\n        value: singleUnit,\n        offset: unit < 0 ? index - prevIndex : index,\n        current: index === prevIndex\n      }));\n    }); // Calculate container offset value\n\n    offsetStyle = {\n      transform: \"translateY(\".concat(-getOffset(prevValue, value, unit), \"00%)\")\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-only\"),\n    style: offsetStyle,\n    onTransitionEnd: onTransitionEnd\n  }, unitNodes);\n};\n\nexport default SingleNumber;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/badge/SingleNumber.js"],"names":["React","classNames","UnitNumber","props","prefixCls","value","current","offset","style","position","top","left","createElement","className","getOffset","start","end","unit","index","SingleNumber","originCount","count","originValue","Number","Math","abs","useState","prevValue","setPrevValue","prevCount","setPrevCount","onTransitionEnd","useEffect","timer","setTimeout","clearTimeout","unitNodes","offsetStyle","isNaN","Object","assign","key","transition","unitNumberList","push","prevIndex","findIndex","n","cutUnitNumberList","slice","map","singleUnit","transform"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nconst UnitNumber = props => {\n  const {\n    prefixCls,\n    value,\n    current,\n    offset = 0\n  } = props;\n  let style;\n  if (offset) {\n    style = {\n      position: 'absolute',\n      top: `${offset}00%`,\n      left: 0\n    };\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: style,\n    className: classNames(`${prefixCls}-only-unit`, {\n      current\n    })\n  }, value);\n};\nfunction getOffset(start, end, unit) {\n  let index = start;\n  let offset = 0;\n  while ((index + 10) % 10 !== end) {\n    index += unit;\n    offset += unit;\n  }\n  return offset;\n}\nconst SingleNumber = props => {\n  const {\n    prefixCls,\n    count: originCount,\n    value: originValue\n  } = props;\n  const value = Number(originValue);\n  const count = Math.abs(originCount);\n  const [prevValue, setPrevValue] = React.useState(value);\n  const [prevCount, setPrevCount] = React.useState(count);\n  // ============================= Events =============================\n  const onTransitionEnd = () => {\n    setPrevValue(value);\n    setPrevCount(count);\n  };\n  // Fallback if transition events are not supported\n  React.useEffect(() => {\n    const timer = setTimeout(onTransitionEnd, 1000);\n    return () => clearTimeout(timer);\n  }, [value]);\n  // ============================= Render =============================\n  // Render unit list\n  let unitNodes;\n  let offsetStyle;\n  if (prevValue === value || Number.isNaN(value) || Number.isNaN(prevValue)) {\n    // Nothing to change\n    unitNodes = [/*#__PURE__*/React.createElement(UnitNumber, Object.assign({}, props, {\n      key: value,\n      current: true\n    }))];\n    offsetStyle = {\n      transition: 'none'\n    };\n  } else {\n    unitNodes = [];\n    // Fill basic number units\n    const end = value + 10;\n    const unitNumberList = [];\n    for (let index = value; index <= end; index += 1) {\n      unitNumberList.push(index);\n    }\n    const unit = prevCount < count ? 1 : -1;\n    // Fill with number unit nodes\n    const prevIndex = unitNumberList.findIndex(n => n % 10 === prevValue);\n    // Cut list\n    const cutUnitNumberList = unit < 0 ? unitNumberList.slice(0, prevIndex + 1) : unitNumberList.slice(prevIndex);\n    unitNodes = cutUnitNumberList.map((n, index) => {\n      const singleUnit = n % 10;\n      return /*#__PURE__*/React.createElement(UnitNumber, Object.assign({}, props, {\n        key: n,\n        value: singleUnit,\n        offset: unit < 0 ? index - prevIndex : index,\n        current: index === prevIndex\n      }));\n    });\n    // Calculate container offset value\n    offsetStyle = {\n      transform: `translateY(${-getOffset(prevValue, value, unit)}00%)`\n    };\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-only`,\n    style: offsetStyle,\n    onTransitionEnd: onTransitionEnd\n  }, unitNodes);\n};\nexport default SingleNumber;"]},"metadata":{},"sourceType":"module"}