{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport QuestionCircleOutlined from \"@ant-design/icons/es/icons/QuestionCircleOutlined\";\nimport classNames from 'classnames';\nimport convertToTooltipProps from '../_util/convertToTooltipProps';\nimport Col from '../grid/col';\nimport { useLocale } from '../locale';\nimport defaultLocale from '../locale/en_US';\nimport Tooltip from '../tooltip';\nimport { FormContext } from './context';\n\nvar FormItemLabel = function FormItemLabel(_ref) {\n  var _classNames2;\n\n  var prefixCls = _ref.prefixCls,\n      label = _ref.label,\n      htmlFor = _ref.htmlFor,\n      labelCol = _ref.labelCol,\n      labelAlign = _ref.labelAlign,\n      colon = _ref.colon,\n      required = _ref.required,\n      requiredMark = _ref.requiredMark,\n      tooltip = _ref.tooltip,\n      vertical = _ref.vertical;\n\n  var _a;\n\n  var _useLocale = useLocale('Form'),\n      _useLocale2 = _slicedToArray(_useLocale, 1),\n      formLocale = _useLocale2[0];\n\n  var _React$useContext = React.useContext(FormContext),\n      contextLabelAlign = _React$useContext.labelAlign,\n      contextLabelCol = _React$useContext.labelCol,\n      labelWrap = _React$useContext.labelWrap,\n      contextColon = _React$useContext.colon;\n\n  if (!label) {\n    return null;\n  }\n\n  var mergedLabelCol = labelCol || contextLabelCol || {};\n  var mergedLabelAlign = labelAlign || contextLabelAlign;\n  var labelClsBasic = \"\".concat(prefixCls, \"-item-label\");\n  var labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && \"\".concat(labelClsBasic, \"-left\"), mergedLabelCol.className, _defineProperty({}, \"\".concat(labelClsBasic, \"-wrap\"), !!labelWrap));\n  var labelChildren = label; // Keep label is original where there should have no colon\n\n  var computedColon = colon === true || contextColon !== false && colon !== false;\n  var haveColon = computedColon && !vertical; // Remove duplicated user input colon\n\n  if (haveColon && typeof label === 'string' && label.trim()) {\n    labelChildren = label.replace(/[:|ï¼š]\\s*$/, '');\n  } // Tooltip\n\n\n  var tooltipProps = convertToTooltipProps(tooltip);\n\n  if (tooltipProps) {\n    var _tooltipProps$icon = tooltipProps.icon,\n        icon = _tooltipProps$icon === void 0 ? /*#__PURE__*/React.createElement(QuestionCircleOutlined, null) : _tooltipProps$icon,\n        restTooltipProps = __rest(tooltipProps, [\"icon\"]);\n\n    var tooltipNode = /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, restTooltipProps), /*#__PURE__*/React.cloneElement(icon, {\n      className: \"\".concat(prefixCls, \"-item-tooltip\"),\n      title: '',\n      onClick: function onClick(e) {\n        // Prevent label behavior in tooltip icon\n        // https://github.com/ant-design/ant-design/issues/46154\n        e.preventDefault();\n      },\n      tabIndex: null\n    }));\n    labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, tooltipNode);\n  } // Required Mark\n\n\n  var isOptionalMark = requiredMark === 'optional';\n  var isRenderMark = typeof requiredMark === 'function';\n  var hideRequiredMark = requiredMark === false;\n\n  if (isRenderMark) {\n    labelChildren = requiredMark(labelChildren, {\n      required: !!required\n    });\n  } else if (isOptionalMark && !required) {\n    labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-item-optional\"),\n      title: \"\"\n    }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = defaultLocale.Form) === null || _a === void 0 ? void 0 : _a.optional)));\n  } // https://github.com/ant-design/ant-design/pull/52950#discussion_r1980880316\n\n\n  var markType;\n\n  if (hideRequiredMark) {\n    markType = 'hidden';\n  } else if (isOptionalMark || isRenderMark) {\n    markType = 'optional';\n  }\n\n  var labelClassName = classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-item-required\"), required), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-item-required-mark-\").concat(markType), markType), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-item-no-colon\"), !computedColon), _classNames2));\n  return /*#__PURE__*/React.createElement(Col, Object.assign({}, mergedLabelCol, {\n    className: labelColClassName\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: htmlFor,\n    className: labelClassName,\n    title: typeof label === 'string' ? label : ''\n  }, labelChildren));\n};\n\nexport default FormItemLabel;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/form/FormItemLabel.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","QuestionCircleOutlined","classNames","convertToTooltipProps","Col","useLocale","defaultLocale","Tooltip","FormContext","FormItemLabel","prefixCls","label","htmlFor","labelCol","labelAlign","colon","required","requiredMark","tooltip","vertical","_a","formLocale","useContext","contextLabelAlign","contextLabelCol","labelWrap","contextColon","mergedLabelCol","mergedLabelAlign","labelClsBasic","labelColClassName","className","labelChildren","computedColon","haveColon","trim","replace","tooltipProps","icon","createElement","restTooltipProps","tooltipNode","assign","cloneElement","title","onClick","preventDefault","tabIndex","Fragment","isOptionalMark","isRenderMark","hideRequiredMark","optional","Form","markType","labelClassName"],"mappings":"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","sourcesContent":["\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport QuestionCircleOutlined from \"@ant-design/icons/es/icons/QuestionCircleOutlined\";\nimport classNames from 'classnames';\nimport convertToTooltipProps from '../_util/convertToTooltipProps';\nimport Col from '../grid/col';\nimport { useLocale } from '../locale';\nimport defaultLocale from '../locale/en_US';\nimport Tooltip from '../tooltip';\nimport { FormContext } from './context';\nconst FormItemLabel = ({\n  prefixCls,\n  label,\n  htmlFor,\n  labelCol,\n  labelAlign,\n  colon,\n  required,\n  requiredMark,\n  tooltip,\n  vertical\n}) => {\n  var _a;\n  const [formLocale] = useLocale('Form');\n  const {\n    labelAlign: contextLabelAlign,\n    labelCol: contextLabelCol,\n    labelWrap,\n    colon: contextColon\n  } = React.useContext(FormContext);\n  if (!label) {\n    return null;\n  }\n  const mergedLabelCol = labelCol || contextLabelCol || {};\n  const mergedLabelAlign = labelAlign || contextLabelAlign;\n  const labelClsBasic = `${prefixCls}-item-label`;\n  const labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && `${labelClsBasic}-left`, mergedLabelCol.className, {\n    [`${labelClsBasic}-wrap`]: !!labelWrap\n  });\n  let labelChildren = label;\n  // Keep label is original where there should have no colon\n  const computedColon = colon === true || contextColon !== false && colon !== false;\n  const haveColon = computedColon && !vertical;\n  // Remove duplicated user input colon\n  if (haveColon && typeof label === 'string' && label.trim()) {\n    labelChildren = label.replace(/[:|ï¼š]\\s*$/, '');\n  }\n  // Tooltip\n  const tooltipProps = convertToTooltipProps(tooltip);\n  if (tooltipProps) {\n    const {\n        icon = /*#__PURE__*/React.createElement(QuestionCircleOutlined, null)\n      } = tooltipProps,\n      restTooltipProps = __rest(tooltipProps, [\"icon\"]);\n    const tooltipNode = /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, restTooltipProps), /*#__PURE__*/React.cloneElement(icon, {\n      className: `${prefixCls}-item-tooltip`,\n      title: '',\n      onClick: e => {\n        // Prevent label behavior in tooltip icon\n        // https://github.com/ant-design/ant-design/issues/46154\n        e.preventDefault();\n      },\n      tabIndex: null\n    }));\n    labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, tooltipNode);\n  }\n  // Required Mark\n  const isOptionalMark = requiredMark === 'optional';\n  const isRenderMark = typeof requiredMark === 'function';\n  const hideRequiredMark = requiredMark === false;\n  if (isRenderMark) {\n    labelChildren = requiredMark(labelChildren, {\n      required: !!required\n    });\n  } else if (isOptionalMark && !required) {\n    labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, /*#__PURE__*/React.createElement(\"span\", {\n      className: `${prefixCls}-item-optional`,\n      title: \"\"\n    }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = defaultLocale.Form) === null || _a === void 0 ? void 0 : _a.optional)));\n  }\n  // https://github.com/ant-design/ant-design/pull/52950#discussion_r1980880316\n  let markType;\n  if (hideRequiredMark) {\n    markType = 'hidden';\n  } else if (isOptionalMark || isRenderMark) {\n    markType = 'optional';\n  }\n  const labelClassName = classNames({\n    [`${prefixCls}-item-required`]: required,\n    [`${prefixCls}-item-required-mark-${markType}`]: markType,\n    [`${prefixCls}-item-no-colon`]: !computedColon\n  });\n  return /*#__PURE__*/React.createElement(Col, Object.assign({}, mergedLabelCol, {\n    className: labelColClassName\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: htmlFor,\n    className: labelClassName,\n    title: typeof label === 'string' ? label : ''\n  }, labelChildren));\n};\nexport default FormItemLabel;"]},"metadata":{},"sourceType":"module"}