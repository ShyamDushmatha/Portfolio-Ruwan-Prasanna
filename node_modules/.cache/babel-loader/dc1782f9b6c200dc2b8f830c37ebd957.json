{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React from 'react';\nimport CloseOutlined from \"@ant-design/icons/es/icons/CloseOutlined\";\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport { useLocale } from '../../locale';\nimport defaultLocale from '../../locale/en_US';\nimport extendsObject from '../extendsObject';\nexport function pickClosable(context) {\n  if (!context) {\n    return undefined;\n  }\n\n  return {\n    closable: context.closable,\n    closeIcon: context.closeIcon\n  };\n}\n/** Convert `closable` and `closeIcon` to config object */\n\nfunction useClosableConfig(closableCollection) {\n  var _ref = closableCollection || {},\n      closable = _ref.closable,\n      closeIcon = _ref.closeIcon;\n\n  return React.useMemo(function () {\n    if ( // If `closable`, whatever rest be should be true\n    !closable && (closable === false || closeIcon === false || closeIcon === null)) {\n      return false;\n    }\n\n    if (closable === undefined && closeIcon === undefined) {\n      return null;\n    }\n\n    var closableConfig = {\n      closeIcon: typeof closeIcon !== 'boolean' && closeIcon !== null ? closeIcon : undefined\n    };\n\n    if (closable && typeof closable === 'object') {\n      closableConfig = Object.assign(Object.assign({}, closableConfig), closable);\n    }\n\n    return closableConfig;\n  }, [closable, closeIcon]);\n}\n/** Use same object to support `useMemo` optimization */\n\n\nvar EmptyFallbackCloseCollection = {};\nexport default function useClosable(propCloseCollection, contextCloseCollection) {\n  var fallbackCloseCollection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EmptyFallbackCloseCollection;\n  // Align the `props`, `context` `fallback` to config object first\n  var propCloseConfig = useClosableConfig(propCloseCollection);\n  var contextCloseConfig = useClosableConfig(contextCloseCollection);\n\n  var _useLocale = useLocale('global', defaultLocale.global),\n      _useLocale2 = _slicedToArray(_useLocale, 1),\n      contextLocale = _useLocale2[0];\n\n  var closeBtnIsDisabled = typeof propCloseConfig !== 'boolean' ? !!(propCloseConfig === null || propCloseConfig === void 0 ? void 0 : propCloseConfig.disabled) : false;\n  var mergedFallbackCloseCollection = React.useMemo(function () {\n    return Object.assign({\n      closeIcon: /*#__PURE__*/React.createElement(CloseOutlined, null)\n    }, fallbackCloseCollection);\n  }, [fallbackCloseCollection]); // Use fallback logic to fill the config\n\n  var mergedClosableConfig = React.useMemo(function () {\n    // ================ Props First ================\n    // Skip if prop is disabled\n    if (propCloseConfig === false) {\n      return false;\n    }\n\n    if (propCloseConfig) {\n      return extendsObject(mergedFallbackCloseCollection, contextCloseConfig, propCloseConfig);\n    } // =============== Context Second ==============\n    // Skip if context is disabled\n\n\n    if (contextCloseConfig === false) {\n      return false;\n    }\n\n    if (contextCloseConfig) {\n      return extendsObject(mergedFallbackCloseCollection, contextCloseConfig);\n    } // ============= Fallback Default ==============\n\n\n    return !mergedFallbackCloseCollection.closable ? false : mergedFallbackCloseCollection;\n  }, [propCloseConfig, contextCloseConfig, mergedFallbackCloseCollection]); // Calculate the final closeIcon\n\n  return React.useMemo(function () {\n    if (mergedClosableConfig === false) {\n      return [false, null, closeBtnIsDisabled, {}];\n    }\n\n    var closeIconRender = mergedFallbackCloseCollection.closeIconRender;\n    var closeIcon = mergedClosableConfig.closeIcon;\n    var mergedCloseIcon = closeIcon; // Wrap the closeIcon with aria props\n\n    var ariaOrDataProps = pickAttrs(mergedClosableConfig, true);\n\n    if (mergedCloseIcon !== null && mergedCloseIcon !== undefined) {\n      // Wrap the closeIcon if needed\n      if (closeIconRender) {\n        mergedCloseIcon = closeIconRender(closeIcon);\n      }\n\n      mergedCloseIcon = /*#__PURE__*/React.isValidElement(mergedCloseIcon) ? /*#__PURE__*/React.cloneElement(mergedCloseIcon, Object.assign({\n        'aria-label': contextLocale.close\n      }, ariaOrDataProps)) : /*#__PURE__*/React.createElement(\"span\", Object.assign({\n        \"aria-label\": contextLocale.close\n      }, ariaOrDataProps), mergedCloseIcon);\n    }\n\n    return [true, mergedCloseIcon, closeBtnIsDisabled, ariaOrDataProps];\n  }, [mergedClosableConfig, mergedFallbackCloseCollection]);\n}","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/antd/es/_util/hooks/useClosable.js"],"names":["React","CloseOutlined","pickAttrs","useLocale","defaultLocale","extendsObject","pickClosable","context","undefined","closable","closeIcon","useClosableConfig","closableCollection","useMemo","closableConfig","Object","assign","EmptyFallbackCloseCollection","useClosable","propCloseCollection","contextCloseCollection","fallbackCloseCollection","propCloseConfig","contextCloseConfig","global","contextLocale","closeBtnIsDisabled","disabled","mergedFallbackCloseCollection","createElement","mergedClosableConfig","closeIconRender","mergedCloseIcon","ariaOrDataProps","isValidElement","cloneElement","close"],"mappings":"AAAA;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AACpC,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOC,SAAP;AACD;;AACD,SAAO;AACLC,IAAAA,QAAQ,EAAEF,OAAO,CAACE,QADb;AAELC,IAAAA,SAAS,EAAEH,OAAO,CAACG;AAFd,GAAP;AAID;AACD;;AACA,SAASC,iBAAT,CAA2BC,kBAA3B,EAA+C;AAC7C,aAGIA,kBAAkB,IAAI,EAH1B;AAAA,MACEH,QADF,QACEA,QADF;AAAA,MAEEC,SAFF,QAEEA,SAFF;;AAIA,SAAOV,KAAK,CAACa,OAAN,CAAc,YAAM;AACzB,SACA;AACA,KAACJ,QAAD,KAAcA,QAAQ,KAAK,KAAb,IAAsBC,SAAS,KAAK,KAApC,IAA6CA,SAAS,KAAK,IAAzE,CAFA,EAEgF;AAC9E,aAAO,KAAP;AACD;;AACD,QAAID,QAAQ,KAAKD,SAAb,IAA0BE,SAAS,KAAKF,SAA5C,EAAuD;AACrD,aAAO,IAAP;AACD;;AACD,QAAIM,cAAc,GAAG;AACnBJ,MAAAA,SAAS,EAAE,OAAOA,SAAP,KAAqB,SAArB,IAAkCA,SAAS,KAAK,IAAhD,GAAuDA,SAAvD,GAAmEF;AAD3D,KAArB;;AAGA,QAAIC,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAApC,EAA8C;AAC5CK,MAAAA,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,cAAlB,CAAd,EAAiDL,QAAjD,CAAjB;AACD;;AACD,WAAOK,cAAP;AACD,GAhBM,EAgBJ,CAACL,QAAD,EAAWC,SAAX,CAhBI,CAAP;AAiBD;AACD;;;AACA,IAAMO,4BAA4B,GAAG,EAArC;AACA,eAAe,SAASC,WAAT,CAAqBC,mBAArB,EAA0CC,sBAA1C,EAA0H;AAAA,MAAxDC,uBAAwD,uEAA9BJ,4BAA8B;AACvI;AACA,MAAMK,eAAe,GAAGX,iBAAiB,CAACQ,mBAAD,CAAzC;AACA,MAAMI,kBAAkB,GAAGZ,iBAAiB,CAACS,sBAAD,CAA5C;;AACA,mBAAwBjB,SAAS,CAAC,QAAD,EAAWC,aAAa,CAACoB,MAAzB,CAAjC;AAAA;AAAA,MAAOC,aAAP;;AACA,MAAMC,kBAAkB,GAAG,OAAOJ,eAAP,KAA2B,SAA3B,GAAuC,CAAC,EAAEA,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAACK,QAApF,CAAxC,GAAwI,KAAnK;AACA,MAAMC,6BAA6B,GAAG5B,KAAK,CAACa,OAAN,CAAc;AAAA,WAAME,MAAM,CAACC,MAAP,CAAc;AACtEN,MAAAA,SAAS,EAAE,aAAaV,KAAK,CAAC6B,aAAN,CAAoB5B,aAApB,EAAmC,IAAnC;AAD8C,KAAd,EAEvDoB,uBAFuD,CAAN;AAAA,GAAd,EAET,CAACA,uBAAD,CAFS,CAAtC,CANuI,CASvI;;AACA,MAAMS,oBAAoB,GAAG9B,KAAK,CAACa,OAAN,CAAc,YAAM;AAC/C;AACA;AACA,QAAIS,eAAe,KAAK,KAAxB,EAA+B;AAC7B,aAAO,KAAP;AACD;;AACD,QAAIA,eAAJ,EAAqB;AACnB,aAAOjB,aAAa,CAACuB,6BAAD,EAAgCL,kBAAhC,EAAoDD,eAApD,CAApB;AACD,KAR8C,CAS/C;AACA;;;AACA,QAAIC,kBAAkB,KAAK,KAA3B,EAAkC;AAChC,aAAO,KAAP;AACD;;AACD,QAAIA,kBAAJ,EAAwB;AACtB,aAAOlB,aAAa,CAACuB,6BAAD,EAAgCL,kBAAhC,CAApB;AACD,KAhB8C,CAiB/C;;;AACA,WAAO,CAACK,6BAA6B,CAACnB,QAA/B,GAA0C,KAA1C,GAAkDmB,6BAAzD;AACD,GAnB4B,EAmB1B,CAACN,eAAD,EAAkBC,kBAAlB,EAAsCK,6BAAtC,CAnB0B,CAA7B,CAVuI,CA8BvI;;AACA,SAAO5B,KAAK,CAACa,OAAN,CAAc,YAAM;AACzB,QAAIiB,oBAAoB,KAAK,KAA7B,EAAoC;AAClC,aAAO,CAAC,KAAD,EAAQ,IAAR,EAAcJ,kBAAd,EAAkC,EAAlC,CAAP;AACD;;AACD,QACEK,eADF,GAEIH,6BAFJ,CACEG,eADF;AAGA,QACErB,SADF,GAEIoB,oBAFJ,CACEpB,SADF;AAGA,QAAIsB,eAAe,GAAGtB,SAAtB,CAVyB,CAWzB;;AACA,QAAMuB,eAAe,GAAG/B,SAAS,CAAC4B,oBAAD,EAAuB,IAAvB,CAAjC;;AACA,QAAIE,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAKxB,SAApD,EAA+D;AAC7D;AACA,UAAIuB,eAAJ,EAAqB;AACnBC,QAAAA,eAAe,GAAGD,eAAe,CAACrB,SAAD,CAAjC;AACD;;AACDsB,MAAAA,eAAe,GAAG,aAAahC,KAAK,CAACkC,cAAN,CAAqBF,eAArB,IAAyC,aAAahC,KAAK,CAACmC,YAAN,CAAmBH,eAAnB,EAAoCjB,MAAM,CAACC,MAAP,CAAc;AACrI,sBAAcS,aAAa,CAACW;AADyG,OAAd,EAEtHH,eAFsH,CAApC,CAAtD,GAEN,aAAajC,KAAK,CAAC6B,aAAN,CAAoB,MAApB,EAA4Bd,MAAM,CAACC,MAAP,CAAc;AAC9E,sBAAcS,aAAa,CAACW;AADkD,OAAd,EAE/DH,eAF+D,CAA5B,EAEjBD,eAFiB,CAFtC;AAKD;;AACD,WAAO,CAAC,IAAD,EAAOA,eAAP,EAAwBN,kBAAxB,EAA4CO,eAA5C,CAAP;AACD,GAzBM,EAyBJ,CAACH,oBAAD,EAAuBF,6BAAvB,CAzBI,CAAP;AA0BD","sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport CloseOutlined from \"@ant-design/icons/es/icons/CloseOutlined\";\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport { useLocale } from '../../locale';\nimport defaultLocale from '../../locale/en_US';\nimport extendsObject from '../extendsObject';\nexport function pickClosable(context) {\n  if (!context) {\n    return undefined;\n  }\n  return {\n    closable: context.closable,\n    closeIcon: context.closeIcon\n  };\n}\n/** Convert `closable` and `closeIcon` to config object */\nfunction useClosableConfig(closableCollection) {\n  const {\n    closable,\n    closeIcon\n  } = closableCollection || {};\n  return React.useMemo(() => {\n    if (\n    // If `closable`, whatever rest be should be true\n    !closable && (closable === false || closeIcon === false || closeIcon === null)) {\n      return false;\n    }\n    if (closable === undefined && closeIcon === undefined) {\n      return null;\n    }\n    let closableConfig = {\n      closeIcon: typeof closeIcon !== 'boolean' && closeIcon !== null ? closeIcon : undefined\n    };\n    if (closable && typeof closable === 'object') {\n      closableConfig = Object.assign(Object.assign({}, closableConfig), closable);\n    }\n    return closableConfig;\n  }, [closable, closeIcon]);\n}\n/** Use same object to support `useMemo` optimization */\nconst EmptyFallbackCloseCollection = {};\nexport default function useClosable(propCloseCollection, contextCloseCollection, fallbackCloseCollection = EmptyFallbackCloseCollection) {\n  // Align the `props`, `context` `fallback` to config object first\n  const propCloseConfig = useClosableConfig(propCloseCollection);\n  const contextCloseConfig = useClosableConfig(contextCloseCollection);\n  const [contextLocale] = useLocale('global', defaultLocale.global);\n  const closeBtnIsDisabled = typeof propCloseConfig !== 'boolean' ? !!(propCloseConfig === null || propCloseConfig === void 0 ? void 0 : propCloseConfig.disabled) : false;\n  const mergedFallbackCloseCollection = React.useMemo(() => Object.assign({\n    closeIcon: /*#__PURE__*/React.createElement(CloseOutlined, null)\n  }, fallbackCloseCollection), [fallbackCloseCollection]);\n  // Use fallback logic to fill the config\n  const mergedClosableConfig = React.useMemo(() => {\n    // ================ Props First ================\n    // Skip if prop is disabled\n    if (propCloseConfig === false) {\n      return false;\n    }\n    if (propCloseConfig) {\n      return extendsObject(mergedFallbackCloseCollection, contextCloseConfig, propCloseConfig);\n    }\n    // =============== Context Second ==============\n    // Skip if context is disabled\n    if (contextCloseConfig === false) {\n      return false;\n    }\n    if (contextCloseConfig) {\n      return extendsObject(mergedFallbackCloseCollection, contextCloseConfig);\n    }\n    // ============= Fallback Default ==============\n    return !mergedFallbackCloseCollection.closable ? false : mergedFallbackCloseCollection;\n  }, [propCloseConfig, contextCloseConfig, mergedFallbackCloseCollection]);\n  // Calculate the final closeIcon\n  return React.useMemo(() => {\n    if (mergedClosableConfig === false) {\n      return [false, null, closeBtnIsDisabled, {}];\n    }\n    const {\n      closeIconRender\n    } = mergedFallbackCloseCollection;\n    const {\n      closeIcon\n    } = mergedClosableConfig;\n    let mergedCloseIcon = closeIcon;\n    // Wrap the closeIcon with aria props\n    const ariaOrDataProps = pickAttrs(mergedClosableConfig, true);\n    if (mergedCloseIcon !== null && mergedCloseIcon !== undefined) {\n      // Wrap the closeIcon if needed\n      if (closeIconRender) {\n        mergedCloseIcon = closeIconRender(closeIcon);\n      }\n      mergedCloseIcon = /*#__PURE__*/React.isValidElement(mergedCloseIcon) ? (/*#__PURE__*/React.cloneElement(mergedCloseIcon, Object.assign({\n        'aria-label': contextLocale.close\n      }, ariaOrDataProps))) : (/*#__PURE__*/React.createElement(\"span\", Object.assign({\n        \"aria-label\": contextLocale.close\n      }, ariaOrDataProps), mergedCloseIcon));\n    }\n    return [true, mergedCloseIcon, closeBtnIsDisabled, ariaOrDataProps];\n  }, [mergedClosableConfig, mergedFallbackCloseCollection]);\n}"]},"metadata":{},"sourceType":"module"}