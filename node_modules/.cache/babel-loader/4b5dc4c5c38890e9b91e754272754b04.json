{"ast":null,"code":"import _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport raf from \"rc-util/es/raf\";\nexport default function useRafLock() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var rafRef = React.useRef(null);\n\n  var cleanup = function cleanup() {\n    raf.cancel(rafRef.current);\n  };\n\n  var setDelayState = function setDelayState(nextState) {\n    cleanup();\n\n    if (nextState) {\n      setState(nextState);\n    } else {\n      rafRef.current = raf(function () {\n        setState(nextState);\n      });\n    }\n  };\n\n  React.useEffect(function () {\n    return cleanup;\n  }, []);\n  return [state, setDelayState];\n}","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/slider/useRafLock.js"],"names":["React","raf","useRafLock","useState","state","setState","rafRef","useRef","cleanup","cancel","current","setDelayState","nextState","useEffect"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,eAAe,SAASC,UAAT,GAAsB;AACnC,wBAA0BF,KAAK,CAACG,QAAN,CAAe,KAAf,CAA1B;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,MAAM,GAAGN,KAAK,CAACO,MAAN,CAAa,IAAb,CAAf;;AACA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBP,IAAAA,GAAG,CAACQ,MAAJ,CAAWH,MAAM,CAACI,OAAlB;AACD,GAFD;;AAGA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,SAAS,EAAI;AACjCJ,IAAAA,OAAO;;AACP,QAAII,SAAJ,EAAe;AACbP,MAAAA,QAAQ,CAACO,SAAD,CAAR;AACD,KAFD,MAEO;AACLN,MAAAA,MAAM,CAACI,OAAP,GAAiBT,GAAG,CAAC,YAAM;AACzBI,QAAAA,QAAQ,CAACO,SAAD,CAAR;AACD,OAFmB,CAApB;AAGD;AACF,GATD;;AAUAZ,EAAAA,KAAK,CAACa,SAAN,CAAgB;AAAA,WAAML,OAAN;AAAA,GAAhB,EAA+B,EAA/B;AACA,SAAO,CAACJ,KAAD,EAAQO,aAAR,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport raf from \"rc-util/es/raf\";\nexport default function useRafLock() {\n  const [state, setState] = React.useState(false);\n  const rafRef = React.useRef(null);\n  const cleanup = () => {\n    raf.cancel(rafRef.current);\n  };\n  const setDelayState = nextState => {\n    cleanup();\n    if (nextState) {\n      setState(nextState);\n    } else {\n      rafRef.current = raf(() => {\n        setState(nextState);\n      });\n    }\n  };\n  React.useEffect(() => cleanup, []);\n  return [state, setDelayState];\n}"]},"metadata":{},"sourceType":"module"}