{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React, { useMemo } from 'react';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Select from '../../select';\nimport { FORMAT_HEX, FORMAT_HSB, FORMAT_RGB } from '../interface';\nimport ColorAlphaInput from './ColorAlphaInput';\nimport ColorHexInput from './ColorHexInput';\nimport ColorHsbInput from './ColorHsbInput';\nimport ColorRgbInput from './ColorRgbInput';\nvar selectOptions = [FORMAT_HEX, FORMAT_HSB, FORMAT_RGB].map(function (format) {\n  return {\n    value: format,\n    label: format.toUpperCase()\n  };\n});\n\nvar ColorInput = function ColorInput(props) {\n  var prefixCls = props.prefixCls,\n      format = props.format,\n      value = props.value,\n      disabledAlpha = props.disabledAlpha,\n      onFormatChange = props.onFormatChange,\n      onChange = props.onChange,\n      disabledFormat = props.disabledFormat;\n\n  var _useMergedState = useMergedState(FORMAT_HEX, {\n    value: format,\n    onChange: onFormatChange\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      colorFormat = _useMergedState2[0],\n      setColorFormat = _useMergedState2[1];\n\n  var colorInputPrefixCls = \"\".concat(prefixCls, \"-input\");\n\n  var handleFormatChange = function handleFormatChange(newFormat) {\n    setColorFormat(newFormat);\n  };\n\n  var steppersNode = useMemo(function () {\n    var inputProps = {\n      value: value,\n      prefixCls: prefixCls,\n      onChange: onChange\n    };\n\n    switch (colorFormat) {\n      case FORMAT_HSB:\n        return /*#__PURE__*/React.createElement(ColorHsbInput, Object.assign({}, inputProps));\n\n      case FORMAT_RGB:\n        return /*#__PURE__*/React.createElement(ColorRgbInput, Object.assign({}, inputProps));\n      // case FORMAT_HEX:\n\n      default:\n        return /*#__PURE__*/React.createElement(ColorHexInput, Object.assign({}, inputProps));\n    }\n  }, [colorFormat, prefixCls, value, onChange]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(colorInputPrefixCls, \"-container\")\n  }, !disabledFormat && /*#__PURE__*/React.createElement(Select, {\n    value: colorFormat,\n    variant: \"borderless\",\n    getPopupContainer: function getPopupContainer(current) {\n      return current;\n    },\n    popupMatchSelectWidth: 68,\n    placement: \"bottomRight\",\n    onChange: handleFormatChange,\n    className: \"\".concat(prefixCls, \"-format-select\"),\n    size: \"small\",\n    options: selectOptions\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: colorInputPrefixCls\n  }, steppersNode), !disabledAlpha && /*#__PURE__*/React.createElement(ColorAlphaInput, {\n    prefixCls: prefixCls,\n    value: value,\n    onChange: onChange\n  }));\n};\n\nexport default ColorInput;","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/color-picker/components/ColorInput.js"],"names":["React","useMemo","useMergedState","Select","FORMAT_HEX","FORMAT_HSB","FORMAT_RGB","ColorAlphaInput","ColorHexInput","ColorHsbInput","ColorRgbInput","selectOptions","map","format","value","label","toUpperCase","ColorInput","props","prefixCls","disabledAlpha","onFormatChange","onChange","disabledFormat","colorFormat","setColorFormat","colorInputPrefixCls","handleFormatChange","newFormat","steppersNode","inputProps","createElement","Object","assign","className","variant","getPopupContainer","current","popupMatchSelectWidth","placement","size","options"],"mappings":"AAAA;;;AAEA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,UAAjC,QAAmD,cAAnD;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,IAAMC,aAAa,GAAG,CAACP,UAAD,EAAaC,UAAb,EAAyBC,UAAzB,EAAqCM,GAArC,CAAyC,UAAAC,MAAM;AAAA,SAAK;AACxEC,IAAAA,KAAK,EAAED,MADiE;AAExEE,IAAAA,KAAK,EAAEF,MAAM,CAACG,WAAP;AAFiE,GAAL;AAAA,CAA/C,CAAtB;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AAC1B,MACEC,SADF,GAQID,KARJ,CACEC,SADF;AAAA,MAEEN,MAFF,GAQIK,KARJ,CAEEL,MAFF;AAAA,MAGEC,KAHF,GAQII,KARJ,CAGEJ,KAHF;AAAA,MAIEM,aAJF,GAQIF,KARJ,CAIEE,aAJF;AAAA,MAKEC,cALF,GAQIH,KARJ,CAKEG,cALF;AAAA,MAMEC,QANF,GAQIJ,KARJ,CAMEI,QANF;AAAA,MAOEC,cAPF,GAQIL,KARJ,CAOEK,cAPF;;AASA,wBAAsCrB,cAAc,CAACE,UAAD,EAAa;AAC/DU,IAAAA,KAAK,EAAED,MADwD;AAE/DS,IAAAA,QAAQ,EAAED;AAFqD,GAAb,CAApD;AAAA;AAAA,MAAOG,WAAP;AAAA,MAAoBC,cAApB;;AAIA,MAAMC,mBAAmB,aAAMP,SAAN,WAAzB;;AACA,MAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,SAAS,EAAI;AACtCH,IAAAA,cAAc,CAACG,SAAD,CAAd;AACD,GAFD;;AAGA,MAAMC,YAAY,GAAG5B,OAAO,CAAC,YAAM;AACjC,QAAM6B,UAAU,GAAG;AACjBhB,MAAAA,KAAK,EAALA,KADiB;AAEjBK,MAAAA,SAAS,EAATA,SAFiB;AAGjBG,MAAAA,QAAQ,EAARA;AAHiB,KAAnB;;AAKA,YAAQE,WAAR;AACE,WAAKnB,UAAL;AACE,eAAO,aAAaL,KAAK,CAAC+B,aAAN,CAAoBtB,aAApB,EAAmCuB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,UAAlB,CAAnC,CAApB;;AACF,WAAKxB,UAAL;AACE,eAAO,aAAaN,KAAK,CAAC+B,aAAN,CAAoBrB,aAApB,EAAmCsB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,UAAlB,CAAnC,CAApB;AACF;;AACA;AACE,eAAO,aAAa9B,KAAK,CAAC+B,aAAN,CAAoBvB,aAApB,EAAmCwB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,UAAlB,CAAnC,CAApB;AAPJ;AASD,GAf2B,EAezB,CAACN,WAAD,EAAcL,SAAd,EAAyBL,KAAzB,EAAgCQ,QAAhC,CAfyB,CAA5B;AAgBA,SAAO,aAAatB,KAAK,CAAC+B,aAAN,CAAoB,KAApB,EAA2B;AAC7CG,IAAAA,SAAS,YAAKR,mBAAL;AADoC,GAA3B,EAEjB,CAACH,cAAD,IAAoB,aAAavB,KAAK,CAAC+B,aAAN,CAAoB5B,MAApB,EAA4B;AAC9DW,IAAAA,KAAK,EAAEU,WADuD;AAE9DW,IAAAA,OAAO,EAAE,YAFqD;AAG9DC,IAAAA,iBAAiB,EAAE,2BAAAC,OAAO;AAAA,aAAIA,OAAJ;AAAA,KAHoC;AAI9DC,IAAAA,qBAAqB,EAAE,EAJuC;AAK9DC,IAAAA,SAAS,EAAE,aALmD;AAM9DjB,IAAAA,QAAQ,EAAEK,kBANoD;AAO9DO,IAAAA,SAAS,YAAKf,SAAL,mBAPqD;AAQ9DqB,IAAAA,IAAI,EAAE,OARwD;AAS9DC,IAAAA,OAAO,EAAE9B;AATqD,GAA5B,CAFhB,EAYf,aAAaX,KAAK,CAAC+B,aAAN,CAAoB,KAApB,EAA2B;AAC3CG,IAAAA,SAAS,EAAER;AADgC,GAA3B,EAEfG,YAFe,CAZE,EAcF,CAACT,aAAD,IAAmB,aAAapB,KAAK,CAAC+B,aAAN,CAAoBxB,eAApB,EAAqC;AACrFY,IAAAA,SAAS,EAAEA,SAD0E;AAErFL,IAAAA,KAAK,EAAEA,KAF8E;AAGrFQ,IAAAA,QAAQ,EAAEA;AAH2E,GAArC,CAd9B,CAApB;AAmBD,CArDD;;AAsDA,eAAeL,UAAf","sourcesContent":["\"use client\";\n\nimport React, { useMemo } from 'react';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Select from '../../select';\nimport { FORMAT_HEX, FORMAT_HSB, FORMAT_RGB } from '../interface';\nimport ColorAlphaInput from './ColorAlphaInput';\nimport ColorHexInput from './ColorHexInput';\nimport ColorHsbInput from './ColorHsbInput';\nimport ColorRgbInput from './ColorRgbInput';\nconst selectOptions = [FORMAT_HEX, FORMAT_HSB, FORMAT_RGB].map(format => ({\n  value: format,\n  label: format.toUpperCase()\n}));\nconst ColorInput = props => {\n  const {\n    prefixCls,\n    format,\n    value,\n    disabledAlpha,\n    onFormatChange,\n    onChange,\n    disabledFormat\n  } = props;\n  const [colorFormat, setColorFormat] = useMergedState(FORMAT_HEX, {\n    value: format,\n    onChange: onFormatChange\n  });\n  const colorInputPrefixCls = `${prefixCls}-input`;\n  const handleFormatChange = newFormat => {\n    setColorFormat(newFormat);\n  };\n  const steppersNode = useMemo(() => {\n    const inputProps = {\n      value,\n      prefixCls,\n      onChange\n    };\n    switch (colorFormat) {\n      case FORMAT_HSB:\n        return /*#__PURE__*/React.createElement(ColorHsbInput, Object.assign({}, inputProps));\n      case FORMAT_RGB:\n        return /*#__PURE__*/React.createElement(ColorRgbInput, Object.assign({}, inputProps));\n      // case FORMAT_HEX:\n      default:\n        return /*#__PURE__*/React.createElement(ColorHexInput, Object.assign({}, inputProps));\n    }\n  }, [colorFormat, prefixCls, value, onChange]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${colorInputPrefixCls}-container`\n  }, !disabledFormat && (/*#__PURE__*/React.createElement(Select, {\n    value: colorFormat,\n    variant: \"borderless\",\n    getPopupContainer: current => current,\n    popupMatchSelectWidth: 68,\n    placement: \"bottomRight\",\n    onChange: handleFormatChange,\n    className: `${prefixCls}-format-select`,\n    size: \"small\",\n    options: selectOptions\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: colorInputPrefixCls\n  }, steppersNode), !disabledAlpha && (/*#__PURE__*/React.createElement(ColorAlphaInput, {\n    prefixCls: prefixCls,\n    value: value,\n    onChange: onChange\n  })));\n};\nexport default ColorInput;"]},"metadata":{},"sourceType":"module"}