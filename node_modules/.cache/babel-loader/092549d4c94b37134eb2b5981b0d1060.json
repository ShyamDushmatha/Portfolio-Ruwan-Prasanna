{"ast":null,"code":"/** converting camel-cased strings to be lowercase and link it with Separator */\nexport function toLowercaseSeparator(key) {\n  return key.replace(/([A-Z])/g, '-$1').toLowerCase();\n}\nexport function getStyleStr(style) {\n  return Object.keys(style).map(function (key) {\n    return \"\".concat(toLowercaseSeparator(key), \": \").concat(style[key], \";\");\n  }).join(' ');\n}\n/** Returns the ratio of the device's physical pixel resolution to the css pixel resolution */\n\nexport function getPixelRatio() {\n  return window.devicePixelRatio || 1;\n}\n/** Whether to re-render the watermark */\n\nexport var reRendering = function reRendering(mutation, isWatermarkEle) {\n  var flag = false; // Whether to delete the watermark node\n\n  if (mutation.removedNodes.length) {\n    flag = Array.from(mutation.removedNodes).some(function (node) {\n      return isWatermarkEle(node);\n    });\n  } // Whether the watermark dom property value has been modified\n\n\n  if (mutation.type === 'attributes' && isWatermarkEle(mutation.target)) {\n    flag = true;\n  }\n\n  return flag;\n};","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/New/Portfolio-Ruwan-Prasanna/node_modules/antd/es/watermark/utils.js"],"names":["toLowercaseSeparator","key","replace","toLowerCase","getStyleStr","style","Object","keys","map","join","getPixelRatio","window","devicePixelRatio","reRendering","mutation","isWatermarkEle","flag","removedNodes","length","Array","from","some","node","type","target"],"mappings":"AAAA;AACA,OAAO,SAASA,oBAAT,CAA8BC,GAA9B,EAAmC;AACxC,SAAOA,GAAG,CAACC,OAAJ,CAAY,UAAZ,EAAwB,KAAxB,EAA+BC,WAA/B,EAAP;AACD;AACD,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACjC,SAAOC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,GAAnB,CAAuB,UAAAP,GAAG;AAAA,qBAAOD,oBAAoB,CAACC,GAAD,CAA3B,eAAqCI,KAAK,CAACJ,GAAD,CAA1C;AAAA,GAA1B,EAA8EQ,IAA9E,CAAmF,GAAnF,CAAP;AACD;AACD;;AACA,OAAO,SAASC,aAAT,GAAyB;AAC9B,SAAOC,MAAM,CAACC,gBAAP,IAA2B,CAAlC;AACD;AACD;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAWC,cAAX,EAA8B;AACvD,MAAIC,IAAI,GAAG,KAAX,CADuD,CAEvD;;AACA,MAAIF,QAAQ,CAACG,YAAT,CAAsBC,MAA1B,EAAkC;AAChCF,IAAAA,IAAI,GAAGG,KAAK,CAACC,IAAN,CAAWN,QAAQ,CAACG,YAApB,EAAkCI,IAAlC,CAAuC,UAAAC,IAAI;AAAA,aAAIP,cAAc,CAACO,IAAD,CAAlB;AAAA,KAA3C,CAAP;AACD,GALsD,CAMvD;;;AACA,MAAIR,QAAQ,CAACS,IAAT,KAAkB,YAAlB,IAAkCR,cAAc,CAACD,QAAQ,CAACU,MAAV,CAApD,EAAuE;AACrER,IAAAA,IAAI,GAAG,IAAP;AACD;;AACD,SAAOA,IAAP;AACD,CAXM","sourcesContent":["/** converting camel-cased strings to be lowercase and link it with Separator */\nexport function toLowercaseSeparator(key) {\n  return key.replace(/([A-Z])/g, '-$1').toLowerCase();\n}\nexport function getStyleStr(style) {\n  return Object.keys(style).map(key => `${toLowercaseSeparator(key)}: ${style[key]};`).join(' ');\n}\n/** Returns the ratio of the device's physical pixel resolution to the css pixel resolution */\nexport function getPixelRatio() {\n  return window.devicePixelRatio || 1;\n}\n/** Whether to re-render the watermark */\nexport const reRendering = (mutation, isWatermarkEle) => {\n  let flag = false;\n  // Whether to delete the watermark node\n  if (mutation.removedNodes.length) {\n    flag = Array.from(mutation.removedNodes).some(node => isWatermarkEle(node));\n  }\n  // Whether the watermark dom property value has been modified\n  if (mutation.type === 'attributes' && isWatermarkEle(mutation.target)) {\n    flag = true;\n  }\n  return flag;\n};"]},"metadata":{},"sourceType":"module"}