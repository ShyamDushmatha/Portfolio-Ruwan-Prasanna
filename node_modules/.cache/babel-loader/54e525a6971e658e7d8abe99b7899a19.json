{"ast":null,"code":"import _classCallCheck from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar round = Math.round;\n/**\n * Support format, alpha unit will check the % mark:\n * - rgba(102, 204, 255, .5)      -> [102, 204, 255, 0.5]\n * - rgb(102 204 255 / .5)        -> [102, 204, 255, 0.5]\n * - rgb(100%, 50%, 0% / 50%)     -> [255, 128, 0, 0.5]\n * - hsl(270, 60, 40, .5)         -> [270, 60, 40, 0.5]\n * - hsl(270deg 60% 40% / 50%)   -> [270, 60, 40, 0.5]\n *\n * When `base` is provided, the percentage value will be divided by `base`.\n */\n\nfunction splitColorStr(str, parseNum) {\n  var match = str // Remove str before `(`\n  .replace(/^[^(]*\\((.*)/, '$1') // Remove str after `)`\n  .replace(/\\).*/, '').match(/\\d*\\.?\\d+%?/g) || [];\n  var numList = match.map(function (item) {\n    return parseFloat(item);\n  });\n\n  for (var i = 0; i < 3; i += 1) {\n    numList[i] = parseNum(numList[i] || 0, match[i] || '', i);\n  } // For alpha. 50% should be 0.5\n\n\n  if (match[3]) {\n    numList[3] = match[3].includes('%') ? numList[3] / 100 : numList[3];\n  } else {\n    // By default, alpha is 1\n    numList[3] = 1;\n  }\n\n  return numList;\n}\n\nvar parseHSVorHSL = function parseHSVorHSL(num, _, index) {\n  return index === 0 ? num : num / 100;\n};\n/** round and limit number to integer between 0-255 */\n\n\nfunction limitRange(value, max) {\n  var mergedMax = max || 255;\n\n  if (value > mergedMax) {\n    return mergedMax;\n  }\n\n  if (value < 0) {\n    return 0;\n  }\n\n  return value;\n}\n\nexport var FastColor = /*#__PURE__*/function () {\n  function FastColor(input) {\n    _classCallCheck(this, FastColor);\n\n    /**\n     * All FastColor objects are valid. So isValid is always true. This property is kept to be compatible with TinyColor.\n     */\n    _defineProperty(this, \"isValid\", true);\n    /**\n     * Red, R in RGB\n     */\n\n\n    _defineProperty(this, \"r\", 0);\n    /**\n     * Green, G in RGB\n     */\n\n\n    _defineProperty(this, \"g\", 0);\n    /**\n     * Blue, B in RGB\n     */\n\n\n    _defineProperty(this, \"b\", 0);\n    /**\n     * Alpha/Opacity, A in RGBA/HSLA\n     */\n\n\n    _defineProperty(this, \"a\", 1); // HSV privates\n\n\n    _defineProperty(this, \"_h\", void 0);\n\n    _defineProperty(this, \"_s\", void 0);\n\n    _defineProperty(this, \"_l\", void 0);\n\n    _defineProperty(this, \"_v\", void 0); // intermediate variables to calculate HSL/HSV\n\n\n    _defineProperty(this, \"_max\", void 0);\n\n    _defineProperty(this, \"_min\", void 0);\n\n    _defineProperty(this, \"_brightness\", void 0);\n    /**\n     * Always check 3 char in the object to determine the format.\n     * We not use function in check to save bundle size.\n     * e.g. 'rgb' -> { r: 0, g: 0, b: 0 }.\n     */\n\n\n    function matchFormat(str) {\n      return str[0] in input && str[1] in input && str[2] in input;\n    }\n\n    if (!input) {// Do nothing since already initialized\n    } else if (typeof input === 'string') {\n      var matchPrefix = function matchPrefix(prefix) {\n        return trimStr.startsWith(prefix);\n      };\n\n      var trimStr = input.trim();\n\n      if (/^#?[A-F\\d]{3,8}$/i.test(trimStr)) {\n        this.fromHexString(trimStr);\n      } else if (matchPrefix('rgb')) {\n        this.fromRgbString(trimStr);\n      } else if (matchPrefix('hsl')) {\n        this.fromHslString(trimStr);\n      } else if (matchPrefix('hsv') || matchPrefix('hsb')) {\n        this.fromHsvString(trimStr);\n      }\n    } else if (input instanceof FastColor) {\n      this.r = input.r;\n      this.g = input.g;\n      this.b = input.b;\n      this.a = input.a;\n      this._h = input._h;\n      this._s = input._s;\n      this._l = input._l;\n      this._v = input._v;\n    } else if (matchFormat('rgb')) {\n      this.r = limitRange(input.r);\n      this.g = limitRange(input.g);\n      this.b = limitRange(input.b);\n      this.a = typeof input.a === 'number' ? limitRange(input.a, 1) : 1;\n    } else if (matchFormat('hsl')) {\n      this.fromHsl(input);\n    } else if (matchFormat('hsv')) {\n      this.fromHsv(input);\n    } else {\n      throw new Error('@ant-design/fast-color: unsupported input ' + JSON.stringify(input));\n    }\n  } // ======================= Setter =======================\n\n\n  _createClass(FastColor, [{\n    key: \"setR\",\n    value: function setR(value) {\n      return this._sc('r', value);\n    }\n  }, {\n    key: \"setG\",\n    value: function setG(value) {\n      return this._sc('g', value);\n    }\n  }, {\n    key: \"setB\",\n    value: function setB(value) {\n      return this._sc('b', value);\n    }\n  }, {\n    key: \"setA\",\n    value: function setA(value) {\n      return this._sc('a', value, 1);\n    }\n  }, {\n    key: \"setHue\",\n    value: function setHue(value) {\n      var hsv = this.toHsv();\n      hsv.h = value;\n      return this._c(hsv);\n    } // ======================= Getter =======================\n\n    /**\n     * Returns the perceived luminance of a color, from 0-1.\n     * @see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n     */\n\n  }, {\n    key: \"getLuminance\",\n    value: function getLuminance() {\n      function adjustGamma(raw) {\n        var val = raw / 255;\n        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n      }\n\n      var R = adjustGamma(this.r);\n      var G = adjustGamma(this.g);\n      var B = adjustGamma(this.b);\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    }\n  }, {\n    key: \"getHue\",\n    value: function getHue() {\n      if (typeof this._h === 'undefined') {\n        var delta = this.getMax() - this.getMin();\n\n        if (delta === 0) {\n          this._h = 0;\n        } else {\n          this._h = round(60 * (this.r === this.getMax() ? (this.g - this.b) / delta + (this.g < this.b ? 6 : 0) : this.g === this.getMax() ? (this.b - this.r) / delta + 2 : (this.r - this.g) / delta + 4));\n        }\n      }\n\n      return this._h;\n    }\n  }, {\n    key: \"getSaturation\",\n    value: function getSaturation() {\n      if (typeof this._s === 'undefined') {\n        var delta = this.getMax() - this.getMin();\n\n        if (delta === 0) {\n          this._s = 0;\n        } else {\n          this._s = delta / this.getMax();\n        }\n      }\n\n      return this._s;\n    }\n  }, {\n    key: \"getLightness\",\n    value: function getLightness() {\n      if (typeof this._l === 'undefined') {\n        this._l = (this.getMax() + this.getMin()) / 510;\n      }\n\n      return this._l;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (typeof this._v === 'undefined') {\n        this._v = this.getMax() / 255;\n      }\n\n      return this._v;\n    }\n    /**\n     * Returns the perceived brightness of the color, from 0-255.\n     * Note: this is not the b of HSB\n     * @see http://www.w3.org/TR/AERT#color-contrast\n     */\n\n  }, {\n    key: \"getBrightness\",\n    value: function getBrightness() {\n      if (typeof this._brightness === 'undefined') {\n        this._brightness = (this.r * 299 + this.g * 587 + this.b * 114) / 1000;\n      }\n\n      return this._brightness;\n    } // ======================== Func ========================\n\n  }, {\n    key: \"darken\",\n    value: function darken() {\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      var h = this.getHue();\n      var s = this.getSaturation();\n      var l = this.getLightness() - amount / 100;\n\n      if (l < 0) {\n        l = 0;\n      }\n\n      return this._c({\n        h: h,\n        s: s,\n        l: l,\n        a: this.a\n      });\n    }\n  }, {\n    key: \"lighten\",\n    value: function lighten() {\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      var h = this.getHue();\n      var s = this.getSaturation();\n      var l = this.getLightness() + amount / 100;\n\n      if (l > 1) {\n        l = 1;\n      }\n\n      return this._c({\n        h: h,\n        s: s,\n        l: l,\n        a: this.a\n      });\n    }\n    /**\n     * Mix the current color a given amount with another color, from 0 to 100.\n     * 0 means no mixing (return current color).\n     */\n\n  }, {\n    key: \"mix\",\n    value: function mix(input) {\n      var _this = this;\n\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n\n      var color = this._c(input);\n\n      var p = amount / 100;\n\n      var calc = function calc(key) {\n        return (color[key] - _this[key]) * p + _this[key];\n      };\n\n      var rgba = {\n        r: round(calc('r')),\n        g: round(calc('g')),\n        b: round(calc('b')),\n        a: round(calc('a') * 100) / 100\n      };\n      return this._c(rgba);\n    }\n    /**\n     * Mix the color with pure white, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return white.\n     */\n\n  }, {\n    key: \"tint\",\n    value: function tint() {\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this.mix({\n        r: 255,\n        g: 255,\n        b: 255,\n        a: 1\n      }, amount);\n    }\n    /**\n     * Mix the color with pure black, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return black.\n     */\n\n  }, {\n    key: \"shade\",\n    value: function shade() {\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this.mix({\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 1\n      }, amount);\n    }\n  }, {\n    key: \"onBackground\",\n    value: function onBackground(background) {\n      var _this2 = this;\n\n      var bg = this._c(background);\n\n      var alpha = this.a + bg.a * (1 - this.a);\n\n      var calc = function calc(key) {\n        return round((_this2[key] * _this2.a + bg[key] * bg.a * (1 - _this2.a)) / alpha);\n      };\n\n      return this._c({\n        r: calc('r'),\n        g: calc('g'),\n        b: calc('b'),\n        a: alpha\n      });\n    } // ======================= Status =======================\n\n  }, {\n    key: \"isDark\",\n    value: function isDark() {\n      return this.getBrightness() < 128;\n    }\n  }, {\n    key: \"isLight\",\n    value: function isLight() {\n      return this.getBrightness() >= 128;\n    } // ======================== MISC ========================\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return this._c(this);\n    } // ======================= Format =======================\n\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      var hex = '#';\n      var rHex = (this.r || 0).toString(16);\n      hex += rHex.length === 2 ? rHex : '0' + rHex;\n      var gHex = (this.g || 0).toString(16);\n      hex += gHex.length === 2 ? gHex : '0' + gHex;\n      var bHex = (this.b || 0).toString(16);\n      hex += bHex.length === 2 ? bHex : '0' + bHex;\n\n      if (typeof this.a === 'number' && this.a >= 0 && this.a < 1) {\n        var aHex = round(this.a * 255).toString(16);\n        hex += aHex.length === 2 ? aHex : '0' + aHex;\n      }\n\n      return hex;\n    }\n    /** CSS support color pattern */\n\n  }, {\n    key: \"toHsl\",\n    value: function toHsl() {\n      return {\n        h: this.getHue(),\n        s: this.getSaturation(),\n        l: this.getLightness(),\n        a: this.a\n      };\n    }\n    /** CSS support color pattern */\n\n  }, {\n    key: \"toHslString\",\n    value: function toHslString() {\n      var h = this.getHue();\n      var s = round(this.getSaturation() * 100);\n      var l = round(this.getLightness() * 100);\n      return this.a !== 1 ? \"hsla(\".concat(h, \",\").concat(s, \"%,\").concat(l, \"%,\").concat(this.a, \")\") : \"hsl(\".concat(h, \",\").concat(s, \"%,\").concat(l, \"%)\");\n    }\n    /** Same as toHsb */\n\n  }, {\n    key: \"toHsv\",\n    value: function toHsv() {\n      return {\n        h: this.getHue(),\n        s: this.getSaturation(),\n        v: this.getValue(),\n        a: this.a\n      };\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return {\n        r: this.r,\n        g: this.g,\n        b: this.b,\n        a: this.a\n      };\n    }\n  }, {\n    key: \"toRgbString\",\n    value: function toRgbString() {\n      return this.a !== 1 ? \"rgba(\".concat(this.r, \",\").concat(this.g, \",\").concat(this.b, \",\").concat(this.a, \")\") : \"rgb(\".concat(this.r, \",\").concat(this.g, \",\").concat(this.b, \")\");\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toRgbString();\n    } // ====================== Privates ======================\n\n    /** Return a new FastColor object with one channel changed */\n\n  }, {\n    key: \"_sc\",\n    value: function _sc(rgb, value, max) {\n      var clone = this.clone();\n      clone[rgb] = limitRange(value, max);\n      return clone;\n    }\n  }, {\n    key: \"_c\",\n    value: function _c(input) {\n      return new this.constructor(input);\n    }\n  }, {\n    key: \"getMax\",\n    value: function getMax() {\n      if (typeof this._max === 'undefined') {\n        this._max = Math.max(this.r, this.g, this.b);\n      }\n\n      return this._max;\n    }\n  }, {\n    key: \"getMin\",\n    value: function getMin() {\n      if (typeof this._min === 'undefined') {\n        this._min = Math.min(this.r, this.g, this.b);\n      }\n\n      return this._min;\n    }\n  }, {\n    key: \"fromHexString\",\n    value: function fromHexString(trimStr) {\n      var withoutPrefix = trimStr.replace('#', '');\n\n      function connectNum(index1, index2) {\n        return parseInt(withoutPrefix[index1] + withoutPrefix[index2 || index1], 16);\n      }\n\n      if (withoutPrefix.length < 6) {\n        // #rgb or #rgba\n        this.r = connectNum(0);\n        this.g = connectNum(1);\n        this.b = connectNum(2);\n        this.a = withoutPrefix[3] ? connectNum(3) / 255 : 1;\n      } else {\n        // #rrggbb or #rrggbbaa\n        this.r = connectNum(0, 1);\n        this.g = connectNum(2, 3);\n        this.b = connectNum(4, 5);\n        this.a = withoutPrefix[6] ? connectNum(6, 7) / 255 : 1;\n      }\n    }\n  }, {\n    key: \"fromHsl\",\n    value: function fromHsl(_ref) {\n      var h = _ref.h,\n          s = _ref.s,\n          l = _ref.l,\n          a = _ref.a;\n      this._h = h % 360;\n      this._s = s;\n      this._l = l;\n      this.a = typeof a === 'number' ? a : 1;\n\n      if (s <= 0) {\n        var rgb = round(l * 255);\n        this.r = rgb;\n        this.g = rgb;\n        this.b = rgb;\n      }\n\n      var r = 0,\n          g = 0,\n          b = 0;\n      var huePrime = h / 60;\n      var chroma = (1 - Math.abs(2 * l - 1)) * s;\n      var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n\n      if (huePrime >= 0 && huePrime < 1) {\n        r = chroma;\n        g = secondComponent;\n      } else if (huePrime >= 1 && huePrime < 2) {\n        r = secondComponent;\n        g = chroma;\n      } else if (huePrime >= 2 && huePrime < 3) {\n        g = chroma;\n        b = secondComponent;\n      } else if (huePrime >= 3 && huePrime < 4) {\n        g = secondComponent;\n        b = chroma;\n      } else if (huePrime >= 4 && huePrime < 5) {\n        r = secondComponent;\n        b = chroma;\n      } else if (huePrime >= 5 && huePrime < 6) {\n        r = chroma;\n        b = secondComponent;\n      }\n\n      var lightnessModification = l - chroma / 2;\n      this.r = round((r + lightnessModification) * 255);\n      this.g = round((g + lightnessModification) * 255);\n      this.b = round((b + lightnessModification) * 255);\n    }\n  }, {\n    key: \"fromHsv\",\n    value: function fromHsv(_ref2) {\n      var h = _ref2.h,\n          s = _ref2.s,\n          v = _ref2.v,\n          a = _ref2.a;\n      this._h = h % 360;\n      this._s = s;\n      this._v = v;\n      this.a = typeof a === 'number' ? a : 1;\n      var vv = round(v * 255);\n      this.r = vv;\n      this.g = vv;\n      this.b = vv;\n\n      if (s <= 0) {\n        return;\n      }\n\n      var hh = h / 60;\n      var i = Math.floor(hh);\n      var ff = hh - i;\n      var p = round(v * (1.0 - s) * 255);\n      var q = round(v * (1.0 - s * ff) * 255);\n      var t = round(v * (1.0 - s * (1.0 - ff)) * 255);\n\n      switch (i) {\n        case 0:\n          this.g = t;\n          this.b = p;\n          break;\n\n        case 1:\n          this.r = q;\n          this.b = p;\n          break;\n\n        case 2:\n          this.r = p;\n          this.b = t;\n          break;\n\n        case 3:\n          this.r = p;\n          this.g = q;\n          break;\n\n        case 4:\n          this.r = t;\n          this.g = p;\n          break;\n\n        case 5:\n        default:\n          this.g = p;\n          this.b = q;\n          break;\n      }\n    }\n  }, {\n    key: \"fromHsvString\",\n    value: function fromHsvString(trimStr) {\n      var cells = splitColorStr(trimStr, parseHSVorHSL);\n      this.fromHsv({\n        h: cells[0],\n        s: cells[1],\n        v: cells[2],\n        a: cells[3]\n      });\n    }\n  }, {\n    key: \"fromHslString\",\n    value: function fromHslString(trimStr) {\n      var cells = splitColorStr(trimStr, parseHSVorHSL);\n      this.fromHsl({\n        h: cells[0],\n        s: cells[1],\n        l: cells[2],\n        a: cells[3]\n      });\n    }\n  }, {\n    key: \"fromRgbString\",\n    value: function fromRgbString(trimStr) {\n      var cells = splitColorStr(trimStr, function (num, txt) {\n        return (// Convert percentage to number. e.g. 50% -> 128\n          txt.includes('%') ? round(num / 100 * 255) : num\n        );\n      });\n      this.r = cells[0];\n      this.g = cells[1];\n      this.b = cells[2];\n      this.a = cells[3];\n    }\n  }]);\n\n  return FastColor;\n}();","map":{"version":3,"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/@ant-design/fast-color/es/FastColor.js"],"names":["_defineProperty","round","Math","splitColorStr","str","parseNum","match","replace","numList","map","item","parseFloat","i","includes","parseHSVorHSL","num","_","index","limitRange","value","max","mergedMax","FastColor","input","matchFormat","matchPrefix","prefix","trimStr","startsWith","trim","test","fromHexString","fromRgbString","fromHslString","fromHsvString","r","g","b","a","_h","_s","_l","_v","fromHsl","fromHsv","Error","JSON","stringify","_sc","hsv","toHsv","h","_c","adjustGamma","raw","val","pow","R","G","B","delta","getMax","getMin","_brightness","amount","getHue","s","getSaturation","l","getLightness","color","p","calc","key","rgba","mix","background","bg","alpha","getBrightness","other","hex","rHex","toString","length","gHex","bHex","aHex","v","getValue","toRgbString","rgb","clone","constructor","_max","_min","min","withoutPrefix","connectNum","index1","index2","parseInt","huePrime","chroma","abs","secondComponent","lightnessModification","vv","hh","floor","ff","q","t","cells","txt"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nconst round = Math.round;\n\n/**\n * Support format, alpha unit will check the % mark:\n * - rgba(102, 204, 255, .5)      -> [102, 204, 255, 0.5]\n * - rgb(102 204 255 / .5)        -> [102, 204, 255, 0.5]\n * - rgb(100%, 50%, 0% / 50%)     -> [255, 128, 0, 0.5]\n * - hsl(270, 60, 40, .5)         -> [270, 60, 40, 0.5]\n * - hsl(270deg 60% 40% / 50%)   -> [270, 60, 40, 0.5]\n *\n * When `base` is provided, the percentage value will be divided by `base`.\n */\nfunction splitColorStr(str, parseNum) {\n  const match = str\n  // Remove str before `(`\n  .replace(/^[^(]*\\((.*)/, '$1')\n  // Remove str after `)`\n  .replace(/\\).*/, '').match(/\\d*\\.?\\d+%?/g) || [];\n  const numList = match.map(item => parseFloat(item));\n  for (let i = 0; i < 3; i += 1) {\n    numList[i] = parseNum(numList[i] || 0, match[i] || '', i);\n  }\n\n  // For alpha. 50% should be 0.5\n  if (match[3]) {\n    numList[3] = match[3].includes('%') ? numList[3] / 100 : numList[3];\n  } else {\n    // By default, alpha is 1\n    numList[3] = 1;\n  }\n  return numList;\n}\nconst parseHSVorHSL = (num, _, index) => index === 0 ? num : num / 100;\n\n/** round and limit number to integer between 0-255 */\nfunction limitRange(value, max) {\n  const mergedMax = max || 255;\n  if (value > mergedMax) {\n    return mergedMax;\n  }\n  if (value < 0) {\n    return 0;\n  }\n  return value;\n}\nexport class FastColor {\n  constructor(input) {\n    /**\n     * All FastColor objects are valid. So isValid is always true. This property is kept to be compatible with TinyColor.\n     */\n    _defineProperty(this, \"isValid\", true);\n    /**\n     * Red, R in RGB\n     */\n    _defineProperty(this, \"r\", 0);\n    /**\n     * Green, G in RGB\n     */\n    _defineProperty(this, \"g\", 0);\n    /**\n     * Blue, B in RGB\n     */\n    _defineProperty(this, \"b\", 0);\n    /**\n     * Alpha/Opacity, A in RGBA/HSLA\n     */\n    _defineProperty(this, \"a\", 1);\n    // HSV privates\n    _defineProperty(this, \"_h\", void 0);\n    _defineProperty(this, \"_s\", void 0);\n    _defineProperty(this, \"_l\", void 0);\n    _defineProperty(this, \"_v\", void 0);\n    // intermediate variables to calculate HSL/HSV\n    _defineProperty(this, \"_max\", void 0);\n    _defineProperty(this, \"_min\", void 0);\n    _defineProperty(this, \"_brightness\", void 0);\n    /**\n     * Always check 3 char in the object to determine the format.\n     * We not use function in check to save bundle size.\n     * e.g. 'rgb' -> { r: 0, g: 0, b: 0 }.\n     */\n    function matchFormat(str) {\n      return str[0] in input && str[1] in input && str[2] in input;\n    }\n    if (!input) {\n      // Do nothing since already initialized\n    } else if (typeof input === 'string') {\n      const trimStr = input.trim();\n      function matchPrefix(prefix) {\n        return trimStr.startsWith(prefix);\n      }\n      if (/^#?[A-F\\d]{3,8}$/i.test(trimStr)) {\n        this.fromHexString(trimStr);\n      } else if (matchPrefix('rgb')) {\n        this.fromRgbString(trimStr);\n      } else if (matchPrefix('hsl')) {\n        this.fromHslString(trimStr);\n      } else if (matchPrefix('hsv') || matchPrefix('hsb')) {\n        this.fromHsvString(trimStr);\n      }\n    } else if (input instanceof FastColor) {\n      this.r = input.r;\n      this.g = input.g;\n      this.b = input.b;\n      this.a = input.a;\n      this._h = input._h;\n      this._s = input._s;\n      this._l = input._l;\n      this._v = input._v;\n    } else if (matchFormat('rgb')) {\n      this.r = limitRange(input.r);\n      this.g = limitRange(input.g);\n      this.b = limitRange(input.b);\n      this.a = typeof input.a === 'number' ? limitRange(input.a, 1) : 1;\n    } else if (matchFormat('hsl')) {\n      this.fromHsl(input);\n    } else if (matchFormat('hsv')) {\n      this.fromHsv(input);\n    } else {\n      throw new Error('@ant-design/fast-color: unsupported input ' + JSON.stringify(input));\n    }\n  }\n\n  // ======================= Setter =======================\n\n  setR(value) {\n    return this._sc('r', value);\n  }\n  setG(value) {\n    return this._sc('g', value);\n  }\n  setB(value) {\n    return this._sc('b', value);\n  }\n  setA(value) {\n    return this._sc('a', value, 1);\n  }\n  setHue(value) {\n    const hsv = this.toHsv();\n    hsv.h = value;\n    return this._c(hsv);\n  }\n\n  // ======================= Getter =======================\n  /**\n   * Returns the perceived luminance of a color, from 0-1.\n   * @see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n   */\n  getLuminance() {\n    function adjustGamma(raw) {\n      const val = raw / 255;\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    }\n    const R = adjustGamma(this.r);\n    const G = adjustGamma(this.g);\n    const B = adjustGamma(this.b);\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  }\n  getHue() {\n    if (typeof this._h === 'undefined') {\n      const delta = this.getMax() - this.getMin();\n      if (delta === 0) {\n        this._h = 0;\n      } else {\n        this._h = round(60 * (this.r === this.getMax() ? (this.g - this.b) / delta + (this.g < this.b ? 6 : 0) : this.g === this.getMax() ? (this.b - this.r) / delta + 2 : (this.r - this.g) / delta + 4));\n      }\n    }\n    return this._h;\n  }\n  getSaturation() {\n    if (typeof this._s === 'undefined') {\n      const delta = this.getMax() - this.getMin();\n      if (delta === 0) {\n        this._s = 0;\n      } else {\n        this._s = delta / this.getMax();\n      }\n    }\n    return this._s;\n  }\n  getLightness() {\n    if (typeof this._l === 'undefined') {\n      this._l = (this.getMax() + this.getMin()) / 510;\n    }\n    return this._l;\n  }\n  getValue() {\n    if (typeof this._v === 'undefined') {\n      this._v = this.getMax() / 255;\n    }\n    return this._v;\n  }\n\n  /**\n   * Returns the perceived brightness of the color, from 0-255.\n   * Note: this is not the b of HSB\n   * @see http://www.w3.org/TR/AERT#color-contrast\n   */\n  getBrightness() {\n    if (typeof this._brightness === 'undefined') {\n      this._brightness = (this.r * 299 + this.g * 587 + this.b * 114) / 1000;\n    }\n    return this._brightness;\n  }\n\n  // ======================== Func ========================\n\n  darken(amount = 10) {\n    const h = this.getHue();\n    const s = this.getSaturation();\n    let l = this.getLightness() - amount / 100;\n    if (l < 0) {\n      l = 0;\n    }\n    return this._c({\n      h,\n      s,\n      l,\n      a: this.a\n    });\n  }\n  lighten(amount = 10) {\n    const h = this.getHue();\n    const s = this.getSaturation();\n    let l = this.getLightness() + amount / 100;\n    if (l > 1) {\n      l = 1;\n    }\n    return this._c({\n      h,\n      s,\n      l,\n      a: this.a\n    });\n  }\n\n  /**\n   * Mix the current color a given amount with another color, from 0 to 100.\n   * 0 means no mixing (return current color).\n   */\n  mix(input, amount = 50) {\n    const color = this._c(input);\n    const p = amount / 100;\n    const calc = key => (color[key] - this[key]) * p + this[key];\n    const rgba = {\n      r: round(calc('r')),\n      g: round(calc('g')),\n      b: round(calc('b')),\n      a: round(calc('a') * 100) / 100\n    };\n    return this._c(rgba);\n  }\n\n  /**\n   * Mix the color with pure white, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return white.\n   */\n  tint(amount = 10) {\n    return this.mix({\n      r: 255,\n      g: 255,\n      b: 255,\n      a: 1\n    }, amount);\n  }\n\n  /**\n   * Mix the color with pure black, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return black.\n   */\n  shade(amount = 10) {\n    return this.mix({\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    }, amount);\n  }\n  onBackground(background) {\n    const bg = this._c(background);\n    const alpha = this.a + bg.a * (1 - this.a);\n    const calc = key => {\n      return round((this[key] * this.a + bg[key] * bg.a * (1 - this.a)) / alpha);\n    };\n    return this._c({\n      r: calc('r'),\n      g: calc('g'),\n      b: calc('b'),\n      a: alpha\n    });\n  }\n\n  // ======================= Status =======================\n  isDark() {\n    return this.getBrightness() < 128;\n  }\n  isLight() {\n    return this.getBrightness() >= 128;\n  }\n\n  // ======================== MISC ========================\n  equals(other) {\n    return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;\n  }\n  clone() {\n    return this._c(this);\n  }\n\n  // ======================= Format =======================\n  toHexString() {\n    let hex = '#';\n    const rHex = (this.r || 0).toString(16);\n    hex += rHex.length === 2 ? rHex : '0' + rHex;\n    const gHex = (this.g || 0).toString(16);\n    hex += gHex.length === 2 ? gHex : '0' + gHex;\n    const bHex = (this.b || 0).toString(16);\n    hex += bHex.length === 2 ? bHex : '0' + bHex;\n    if (typeof this.a === 'number' && this.a >= 0 && this.a < 1) {\n      const aHex = round(this.a * 255).toString(16);\n      hex += aHex.length === 2 ? aHex : '0' + aHex;\n    }\n    return hex;\n  }\n\n  /** CSS support color pattern */\n  toHsl() {\n    return {\n      h: this.getHue(),\n      s: this.getSaturation(),\n      l: this.getLightness(),\n      a: this.a\n    };\n  }\n\n  /** CSS support color pattern */\n  toHslString() {\n    const h = this.getHue();\n    const s = round(this.getSaturation() * 100);\n    const l = round(this.getLightness() * 100);\n    return this.a !== 1 ? `hsla(${h},${s}%,${l}%,${this.a})` : `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /** Same as toHsb */\n  toHsv() {\n    return {\n      h: this.getHue(),\n      s: this.getSaturation(),\n      v: this.getValue(),\n      a: this.a\n    };\n  }\n  toRgb() {\n    return {\n      r: this.r,\n      g: this.g,\n      b: this.b,\n      a: this.a\n    };\n  }\n  toRgbString() {\n    return this.a !== 1 ? `rgba(${this.r},${this.g},${this.b},${this.a})` : `rgb(${this.r},${this.g},${this.b})`;\n  }\n  toString() {\n    return this.toRgbString();\n  }\n\n  // ====================== Privates ======================\n  /** Return a new FastColor object with one channel changed */\n  _sc(rgb, value, max) {\n    const clone = this.clone();\n    clone[rgb] = limitRange(value, max);\n    return clone;\n  }\n  _c(input) {\n    return new this.constructor(input);\n  }\n  getMax() {\n    if (typeof this._max === 'undefined') {\n      this._max = Math.max(this.r, this.g, this.b);\n    }\n    return this._max;\n  }\n  getMin() {\n    if (typeof this._min === 'undefined') {\n      this._min = Math.min(this.r, this.g, this.b);\n    }\n    return this._min;\n  }\n  fromHexString(trimStr) {\n    const withoutPrefix = trimStr.replace('#', '');\n    function connectNum(index1, index2) {\n      return parseInt(withoutPrefix[index1] + withoutPrefix[index2 || index1], 16);\n    }\n    if (withoutPrefix.length < 6) {\n      // #rgb or #rgba\n      this.r = connectNum(0);\n      this.g = connectNum(1);\n      this.b = connectNum(2);\n      this.a = withoutPrefix[3] ? connectNum(3) / 255 : 1;\n    } else {\n      // #rrggbb or #rrggbbaa\n      this.r = connectNum(0, 1);\n      this.g = connectNum(2, 3);\n      this.b = connectNum(4, 5);\n      this.a = withoutPrefix[6] ? connectNum(6, 7) / 255 : 1;\n    }\n  }\n  fromHsl({\n    h,\n    s,\n    l,\n    a\n  }) {\n    this._h = h % 360;\n    this._s = s;\n    this._l = l;\n    this.a = typeof a === 'number' ? a : 1;\n    if (s <= 0) {\n      const rgb = round(l * 255);\n      this.r = rgb;\n      this.g = rgb;\n      this.b = rgb;\n    }\n    let r = 0,\n      g = 0,\n      b = 0;\n    const huePrime = h / 60;\n    const chroma = (1 - Math.abs(2 * l - 1)) * s;\n    const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n    if (huePrime >= 0 && huePrime < 1) {\n      r = chroma;\n      g = secondComponent;\n    } else if (huePrime >= 1 && huePrime < 2) {\n      r = secondComponent;\n      g = chroma;\n    } else if (huePrime >= 2 && huePrime < 3) {\n      g = chroma;\n      b = secondComponent;\n    } else if (huePrime >= 3 && huePrime < 4) {\n      g = secondComponent;\n      b = chroma;\n    } else if (huePrime >= 4 && huePrime < 5) {\n      r = secondComponent;\n      b = chroma;\n    } else if (huePrime >= 5 && huePrime < 6) {\n      r = chroma;\n      b = secondComponent;\n    }\n    const lightnessModification = l - chroma / 2;\n    this.r = round((r + lightnessModification) * 255);\n    this.g = round((g + lightnessModification) * 255);\n    this.b = round((b + lightnessModification) * 255);\n  }\n  fromHsv({\n    h,\n    s,\n    v,\n    a\n  }) {\n    this._h = h % 360;\n    this._s = s;\n    this._v = v;\n    this.a = typeof a === 'number' ? a : 1;\n    const vv = round(v * 255);\n    this.r = vv;\n    this.g = vv;\n    this.b = vv;\n    if (s <= 0) {\n      return;\n    }\n    const hh = h / 60;\n    const i = Math.floor(hh);\n    const ff = hh - i;\n    const p = round(v * (1.0 - s) * 255);\n    const q = round(v * (1.0 - s * ff) * 255);\n    const t = round(v * (1.0 - s * (1.0 - ff)) * 255);\n    switch (i) {\n      case 0:\n        this.g = t;\n        this.b = p;\n        break;\n      case 1:\n        this.r = q;\n        this.b = p;\n        break;\n      case 2:\n        this.r = p;\n        this.b = t;\n        break;\n      case 3:\n        this.r = p;\n        this.g = q;\n        break;\n      case 4:\n        this.r = t;\n        this.g = p;\n        break;\n      case 5:\n      default:\n        this.g = p;\n        this.b = q;\n        break;\n    }\n  }\n  fromHsvString(trimStr) {\n    const cells = splitColorStr(trimStr, parseHSVorHSL);\n    this.fromHsv({\n      h: cells[0],\n      s: cells[1],\n      v: cells[2],\n      a: cells[3]\n    });\n  }\n  fromHslString(trimStr) {\n    const cells = splitColorStr(trimStr, parseHSVorHSL);\n    this.fromHsl({\n      h: cells[0],\n      s: cells[1],\n      l: cells[2],\n      a: cells[3]\n    });\n  }\n  fromRgbString(trimStr) {\n    const cells = splitColorStr(trimStr, (num, txt) =>\n    // Convert percentage to number. e.g. 50% -> 128\n    txt.includes('%') ? round(num / 100 * 255) : num);\n    this.r = cells[0];\n    this.g = cells[1];\n    this.b = cells[2];\n    this.a = cells[3];\n  }\n}"]},"metadata":{},"sourceType":"module"}