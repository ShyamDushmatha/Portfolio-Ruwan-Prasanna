{"ast":null,"code":"var t = function t(_t) {\n  return \"object\" == typeof _t && null != _t && 1 === _t.nodeType;\n},\n    e = function e(t, _e) {\n  return (!_e || \"hidden\" !== t) && \"visible\" !== t && \"clip\" !== t;\n},\n    n = function n(t, _n) {\n  if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {\n    var _o = getComputedStyle(t, null);\n\n    return e(_o.overflowY, _n) || e(_o.overflowX, _n) || function (t) {\n      var e = function (t) {\n        if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;\n\n        try {\n          return t.ownerDocument.defaultView.frameElement;\n        } catch (t) {\n          return null;\n        }\n      }(t);\n\n      return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);\n    }(t);\n  }\n\n  return !1;\n},\n    o = function o(t, e, n, _o2, l, r, i, s) {\n  return r < t && i > e || r > t && i < e ? 0 : r <= t && s <= n || i >= e && s >= n ? r - t - _o2 : i > e && s < n || r < t && s > n ? i - e + l : 0;\n},\n    l = function l(t) {\n  var e = t.parentElement;\n  return null == e ? t.getRootNode().host || null : e;\n},\n    r = function r(e, _r2) {\n  var i, s, d, h;\n  if (\"undefined\" == typeof document) return [];\n  var c = _r2.scrollMode,\n      f = _r2.block,\n      u = _r2.inline,\n      a = _r2.boundary,\n      g = _r2.skipOverflowHiddenElements,\n      p = \"function\" == typeof a ? a : function (t) {\n    return t !== a;\n  };\n  if (!t(e)) throw new TypeError(\"Invalid target\");\n  var m = document.scrollingElement || document.documentElement,\n      w = [];\n  var W = e;\n\n  for (; t(W) && p(W);) {\n    if (W = l(W), W === m) {\n      w.push(W);\n      break;\n    }\n\n    null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);\n  }\n\n  var b = null != (s = null == (i = window.visualViewport) ? void 0 : i.width) ? s : innerWidth,\n      H = null != (h = null == (d = window.visualViewport) ? void 0 : d.height) ? h : innerHeight,\n      _window = window,\n      y = _window.scrollX,\n      M = _window.scrollY,\n      _e$getBoundingClientR = e.getBoundingClientRect(),\n      v = _e$getBoundingClientR.height,\n      E = _e$getBoundingClientR.width,\n      x = _e$getBoundingClientR.top,\n      C = _e$getBoundingClientR.right,\n      I = _e$getBoundingClientR.bottom,\n      R = _e$getBoundingClientR.left,\n      _ref = function (t) {\n    var e = window.getComputedStyle(t);\n    return {\n      top: parseFloat(e.scrollMarginTop) || 0,\n      right: parseFloat(e.scrollMarginRight) || 0,\n      bottom: parseFloat(e.scrollMarginBottom) || 0,\n      left: parseFloat(e.scrollMarginLeft) || 0\n    };\n  }(e),\n      T = _ref.top,\n      B = _ref.right,\n      F = _ref.bottom,\n      V = _ref.left;\n\n  var k = \"start\" === f || \"nearest\" === f ? x - T : \"end\" === f ? I + F : x + v / 2 - T + F,\n      D = \"center\" === u ? R + E / 2 - V + B : \"end\" === u ? C + B : R - V;\n  var L = [];\n\n  for (var _t2 = 0; _t2 < w.length; _t2++) {\n    var _e2 = w[_t2],\n        _e2$getBoundingClient = _e2.getBoundingClientRect(),\n        _l = _e2$getBoundingClient.height,\n        _r = _e2$getBoundingClient.width,\n        _i = _e2$getBoundingClient.top,\n        _s = _e2$getBoundingClient.right,\n        _d = _e2$getBoundingClient.bottom,\n        _h = _e2$getBoundingClient.left;\n\n    if (\"if-needed\" === c && x >= 0 && R >= 0 && I <= H && C <= b && (_e2 === m && !n(_e2) || x >= _i && I <= _d && R >= _h && C <= _s)) return L;\n\n    var _a = getComputedStyle(_e2),\n        _g = parseInt(_a.borderLeftWidth, 10),\n        _p = parseInt(_a.borderTopWidth, 10),\n        _W = parseInt(_a.borderRightWidth, 10),\n        _T = parseInt(_a.borderBottomWidth, 10);\n\n    var _B = 0,\n        _F = 0;\n\n    var _V = \"offsetWidth\" in _e2 ? _e2.offsetWidth - _e2.clientWidth - _g - _W : 0,\n        S = \"offsetHeight\" in _e2 ? _e2.offsetHeight - _e2.clientHeight - _p - _T : 0,\n        X = \"offsetWidth\" in _e2 ? 0 === _e2.offsetWidth ? 0 : _r / _e2.offsetWidth : 0,\n        Y = \"offsetHeight\" in _e2 ? 0 === _e2.offsetHeight ? 0 : _l / _e2.offsetHeight : 0;\n\n    if (m === _e2) _B = \"start\" === f ? k : \"end\" === f ? k - H : \"nearest\" === f ? o(M, M + H, H, _p, _T, M + k, M + k + v, v) : k - H / 2, _F = \"start\" === u ? D : \"center\" === u ? D - b / 2 : \"end\" === u ? D - b : o(y, y + b, b, _g, _W, y + D, y + D + E, E), _B = Math.max(0, _B + M), _F = Math.max(0, _F + y);else {\n      _B = \"start\" === f ? k - _i - _p : \"end\" === f ? k - _d + _T + S : \"nearest\" === f ? o(_i, _d, _l, _p, _T + S, k, k + v, v) : k - (_i + _l / 2) + S / 2, _F = \"start\" === u ? D - _h - _g : \"center\" === u ? D - (_h + _r / 2) + _V / 2 : \"end\" === u ? D - _s + _W + _V : o(_h, _s, _r, _g, _W + _V, D, D + E, E);\n      var _t3 = _e2.scrollLeft,\n          _n2 = _e2.scrollTop;\n      _B = 0 === Y ? 0 : Math.max(0, Math.min(_n2 + _B / Y, _e2.scrollHeight - _l / Y + S)), _F = 0 === X ? 0 : Math.max(0, Math.min(_t3 + _F / X, _e2.scrollWidth - _r / X + _V)), k += _n2 - _B, D += _t3 - _F;\n    }\n    L.push({\n      el: _e2,\n      top: _B,\n      left: _F\n    });\n  }\n\n  return L;\n};\n\nexport { r as compute };","map":{"version":3,"mappings":"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","names":["isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","getComputedStyle","style","overflowY","overflowX","ownerDocument","defaultView","frameElement","e","frame","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","getParentElement","element","parent","parentElement","getRootNode","host","compute","target","options","document","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","documentElement","frames","cursor","push","body","viewportWidth","visualViewport","width","_b","innerWidth","viewportHeight","height","_d","innerHeight","window","scrollX","scrollY","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","right","targetBottom","bottom","targetLeft","left","parseFloat","computedStyle","scrollMarginTop","scrollMarginRight","scrollMarginBottom","scrollMarginLeft","marginTop","marginRight","marginBottom","marginLeft","targetBlock","targetInline","computations","index","length","borderLeft","parseInt","frameStyle","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","offsetWidth","scrollbarHeight","offsetHeight","scaleX","scaleY","Math","max","scrollbarWidth","scrollLeft","scrollTop","min"],"sources":["/Users/shamryshiraz/Documents/New/Untitled/Portfolio/node_modules/compute-scroll-into-view/src/index.ts"],"sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n/**\n * This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\n * @public\n */\nexport type ScrollMode = 'always' | 'if-needed'\n\n/** @public */\nexport interface Options {\n  /**\n   * Control the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\n   * This means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n   * @defaultValue 'center'\n   */\n  block?: ScrollLogicalPosition\n  /**\n   * Like `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n   * @defaultValue 'nearest'\n   */\n  inline?: ScrollLogicalPosition\n  /**\n   * This is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/5677\n   *\n   * This library will be updated to reflect any changes to the spec and will provide a migration path.\n   * To be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n   * @defaultValue 'always'\n   */\n  scrollMode?: ScrollMode\n  /**\n   * By default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\n   * By passing a boundary you can short-circuit this loop depending on your needs:\n   * \n   * - Prevent the browser window from scrolling.\n   * - Scroll elements into view in a list, without scrolling container elements.\n   * \n   * You can also pass a function to do more dynamic checks to override the scroll scoping:\n   * \n   * ```js\n   * let actions = compute(target, {\n   *   boundary: (parent) => {\n   *     // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n   *     // this is required by the CSSOM spec\n   *     if (getComputedStyle(parent)['overflow'] === 'hidden') {\n   *       return false\n   *     }\n\n   *     return true\n   *   },\n   * })\n   * ```\n   * @defaultValue null\n   */\n  boundary?: Element | ((parent: Element) => boolean) | null\n  /**\n   * New option that skips auto-scrolling all nodes with overflow: hidden set\n   * See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\n   * @defaultValue false\n   * @public\n   */\n  skipOverflowHiddenElements?: boolean\n}\n\n/** @public */\nexport interface ScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nconst isElement = (el: any): el is Element =>\n  typeof el === 'object' && el != null && el.nodeType === 1\n\nconst canOverflow = (\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) => {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nconst getFrameElement = (el: Element) => {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nconst isHiddenByFrame = (el: Element): boolean => {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nconst isScrollable = (el: Element, skipOverflowHiddenElements?: boolean) => {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nconst alignNearest = (\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) => {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nconst getParentElement = (element: Node): Element | null => {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\nconst getScrollMargins = (target: Element) => {\n  const computedStyle = window.getComputedStyle(target)\n  return {\n    top: parseFloat(computedStyle.scrollMarginTop) || 0,\n    right: parseFloat(computedStyle.scrollMarginRight) || 0,\n    bottom: parseFloat(computedStyle.scrollMarginBottom) || 0,\n    left: parseFloat(computedStyle.scrollMarginLeft) || 0,\n  }\n}\n\n/** @public */\nexport const compute = (target: Element, options: Options): ScrollAction[] => {\n  if (typeof document === 'undefined') {\n    // If there's no DOM we assume it's not in a browser environment\n    return []\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = window.visualViewport?.width ?? innerWidth\n  const viewportHeight = window.visualViewport?.height ?? innerHeight\n  const { scrollX, scrollY } = window\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n  const {\n    top: marginTop,\n    right: marginRight,\n    bottom: marginBottom,\n    left: marginLeft,\n  } = getScrollMargins(target)\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop - marginTop\n      : block === 'end'\n      ? targetBottom + marginBottom\n      : targetTop + targetHeight / 2 - marginTop + marginBottom // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2 - marginLeft + marginRight\n      : inline === 'end'\n      ? targetRight + marginRight\n      : targetLeft - marginLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: ScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      // scrollingElement is added to the frames array even if it's not scrollable, in which case checking its bounds is not required\n      ((frame === scrollingElement && !isScrollable(frame)) ||\n        (targetTop >= top &&\n          targetBottom <= bottom &&\n          targetLeft >= left &&\n          targetRight <= right))\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          scrollY,\n          scrollY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          scrollY + targetBlock,\n          scrollY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          scrollX,\n          scrollX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          scrollX + targetInline,\n          scrollX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + scrollY)\n      inlineScroll = Math.max(0, inlineScroll + scrollX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll =\n        scaleY === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollTop + blockScroll / scaleY,\n                frame.scrollHeight - height / scaleY + scrollbarHeight\n              )\n            )\n      inlineScroll =\n        scaleX === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollLeft + inlineScroll / scaleX,\n                frame.scrollWidth - width / scaleX + scrollbarWidth\n              )\n            )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"]},"metadata":{},"sourceType":"module"}